type AGMDocument {
  documentName: String
  documentType: AGMDocumentType!
  documentUrl: String
  order: Float!
  title: String!
}

input AGMDocumentInput {
  documentName: String
  documentType: AGMDocumentType!
  documentUrl: String
  order: Float!
  title: String!
}

enum AGMDocumentType {
  AMCOS
  APRA
  FINANCIAL
}

type AGMOrphanedType {
  eben: Eben!
}

enum AGMVoteType {
  AMCOS_GENERIC
  APRA_AU_WRITER
  APRA_NZ_WRITER
  APRA_PUBLISHER
  NONE
}

enum Access {
  AGM
  CatalogueTransfer
  Distribution
  IDAP
  Idm
  OnemusicAdmin
  OperationsAdmin
  Opus
  ProductionMusicAdmin
  ProductionMusicRegister
  ProductionMusicRegisterSubmitted
  PublisherAdmin
  RepertoireManagement
  SOTY
  WriterAdmin
  WriterRegister
  WriterRegisterSubmitted
}

type ActiveClaimsOutput {
  activeClaims: [ClaimsSummary!]!
  processedCount: Float!
}

input AddNewClaimInput {
  isLoginFromApp: Boolean = true
  memberId: String!
  performanceDate: [String!]!
  performanceType: PerformanceTypes!
  performedWorksDetail: [PerformedWorkDetail!]!
  performerName: String!
  venueDetail: VenueDetail!
}

"""
AddNewClaimOutput
"""
type AddNewClaimOutput {
  success: Boolean!
}

enum AddressType {
  PA
  PH
  RA
  RH
}

type AdminComment {
  adminName: String!
  comment: String!
  updatedDate: String!
}

enum AdminSearchMemberFilters {
  MembersWithoutUser
  PublisherMembers
  WriterMembers
}

type AgmCandidates {
  avatarImagePath: String
  candidateBiography: String
  cdCompany: String!
  createdDate: DateTime!
  electionStatement: String
  hyperlinkTitle: String
  hyperlinkUrl: String
  memberId: String!
  updatedDate: DateTime!
  year: Float!
}

"""
agreement output
"""
type AgreementOutput {
  agreementType: AgreementType
  rightType: RightType
}

enum AgreementType {
  GeneralCatalogAgreement
  SpecificWorksAgreement
}

"""
ApiInfoOutput
"""
type ApiInfoOutput {
  forceLogout: Boolean!
  minimumVersion: String!
}

enum ApiNames {
  MOBILEAPPAPI
}

input AuditRecord {
  beforeImage: String!
  comment: String!
  membkey: String!
  uprokey: String!
}

type Band {
  bandkey: String!
  cdState: String
  name: String!
}

type BaseMemberAddressDetails {
  address1: String
  address2: String
  address3: String
  address4: String
  addressType: AddressType!
  countryCode: String
  countryName: String
  postcode: String
  region: Region
}

input BaseMemberAddressDetailsInput {
  address1: String
  address2: String
  address3: String
  address4: String
  addressType: AddressType!
  countryCode: String
  countryName: String
  postcode: String
  region: Region
}

type BaseMemberBankDetails {
  accountName: String!

  """
  NZ:
      for Front end: 123456700 or 123456700
      for cms db: 1234567-00 or 1234567-001
  """
  accountNumber: String!
  address1: String
  address2: String
  bankName: String!

  """
  NZ and AU: 123456
  oversea: null
  """
  bsb: String
  countryCode: String!
  currency: String
  iban: String
  interBankAddress: String
  interBankName: String
  paymentType: PaymentType
  routingNumber: String
  sortCode: String
  swiftCode: String
}

input BaseMemberBankDetailsInput {
  accountName: String!

  """
  NZ:
      for Front end: 123456700 or 123456700
      for cms db: 1234567-00 or 1234567-001
  """
  accountNumber: String!
  address1: String
  address2: String
  bankName: String!

  """
  NZ and AU: 123456
  oversea: null
  """
  bsb: String
  countryCode: String!
  currency: String
  iban: String
  interBankAddress: String
  interBankName: String
  paymentType: PaymentType
  routingNumber: String
  sortCode: String
  swiftCode: String
}

type BaseMemberCompanyDetails {
  companyType: CompanyType!
  dateApplied: DateTime
  dateElected: DateTime
  ediStandardType: String
  isElected: Boolean!
  isVote: Boolean!
  memberId: String
  voteStatus: Boolean
  voteType: String
  votesPrimary: Float
}

type BreakdownData {
  adjustmentsByForeignSocieties: Float
  directPay: Float
  netRoyalties: Float
  totalEarnings: Float
}

type BreakdownInfo {
  label: String!
  value: Float!
}

type BusinessMapping {
  access: Access!
  createdAt: DateTime!
  id: String!
  name: String!
  rule: String!
}

enum BusinessRules {
  ApraAddress
  DigitalServiceProvidersRule
  DistributionCategoryRule
  WorkCategoryRule
}

input CUDistributionNotesDetailsInput {
  content: String!
  createdBy: String!
  createdDate: DateTime!
  distributionLabel: String!
  noteStatus: String!
  publishTo: String!
  subject: String!
  updatedBy: String!
  updatedDate: DateTime!
}

input CUDistributionNotesInput {
  distributionLabel: String!
  publishedBy: String!
  publishedOn: DateTime!
  status: String!
}

input CastSotyMemberVoteInput {
  freeTextArtist: String
  freeTextTitle: String
  memberId: String!
  songId: Float
}

input CastVoteInput {
  candidateMemberIds: [String!]!
  memberId: String!
  voteType: AGMVoteType!
}

enum CatalogueTransferSubAccess {
  CatalogueTransfer_CatalogueTransfer
  CatalogueTransfer_TransferHistory
}

input CategoryChartDataInputTypeArray {
  businessMappingRules: GetBusinessMappingInputType!
  cacheKey: String!
  details: [EIInputType!]!
  memberId: String!
  webSocketId: String!
}

type CategoryChartDataOutputArray {
  businessMappings: [BusinessMapping!]!
  chartData: [DistributionHistoryOutputArray!]!
}

enum CdCategory {
  A
  AD
  AM
  AQ
  AR
  C
  CA
  E
  ES
  SA
  SE
  SR
  TR
}

input CheckIfNameExistAsWriterInput {
  firstName: String!
  lastName: String!
}

type ClaimDetail {
  accountNumber: String
  countryName: String!
  distributionId: String!
  distributionLabel: String!
  location: String!
  location2: String
  locationId: String
  memberId: String!
  performanceDate: DateTime!
  performanceType: String!
  performerName: String!
  postcode: String!
  state: String
  status: String!
  submissionDate: String!
  submissionId: String!
  suburb: String!
  venueName: String!
  venueUniquifier: String!
  worksPerformed: [ClaimPerformedWork!]!
}

type ClaimPerformedWork {
  duration: Float!
  timesPerformed: Float!
  title: String!
  uniquifier: String!
  workId: String
  writers: String!
}

type ClaimsSummary {
  distributionId: String!
  distributionLabel: String!
  performanceDate: DateTime!
  submissionDate: DateTime!
  submissionId: String!
  venueName: String!
}

enum ClientConfirmStatus {
  Confirmed
  EmailSent
  SendEmailFailed
}

type CmsRoyaltyDistribution {
  amountPaid: Float
  amountPaidCurrency: String
  countryName: String!
  dateCreated: String!
  datePeriodEnd: String!
  distribution: String!
  distributionLabel: String!
  distributionType: String!
  memberId: String!
  paid: Boolean!
  remittanceAdviseFlag: Boolean!
  royalties: Float!
  royaltiesCurrency: String!
  royaltyStmtFlag: Boolean!
  sequence: Float!
  taxInvoiceFlag: Boolean!
}

type CmsSearchAllWork {
  title: String
  workId: String!
  writers: String
}

type CmsSearchWork {
  createdAt: DateTime
  dispute: Boolean!
  duration: Float!
  newRegistration: Boolean!
  opusStatus: OpusStatus
  registered: Boolean!
  title: String
  unprocessed: Boolean!
  workId: String!
  writers: String
}

input CmsStatementPdfInput {
  distribution: String
  memberId: String
  reportType: StatementPdfTypes!
  sequence: Int
}

type CmsStatementPdfOutput {
  pdfUrl: String!
}

type CmsWorkDetailShareDetail {
  category: String!
  ipiNumber: String!
  name: String!
  percentage: Float!
  sequence: Float!
}

type CmsWorkIsrc {
  cdSource: String!
  isrc: String!
  sourceIdent: String!
  workId: String!
}

type CoWriter {
  ipiNumber: String
  name: String
}

type CoWritersOutput {
  coWriters: [CoWriter!]!
  totalRecords: Float
}

"""
Colb
"""
type Colb {
  briefDescription: String
  cdCommissionGroup: String
  cdCompany: String!
  cdCountry: String!
  cdInvoiceFully: String
  colbkey: String!
  coltList: [Colt!]
  description: String
  distFrequency: Float
  genericLob: String
  ledgerAccount: String
  ledgerDescription: String
  limitProd: Float
  limitWork: Float
  perInvThreshhold: Float
  summaryColumn: Float
  workProdProportion: Float
  ynOptOut: String!
  ynPseudoLine: String!
  ynTariffs: String
}

"""
Colt
"""
type Colt {
  cdCompany: String!
  cdCountry: String!
  colb: Colb
  colbkey: String!
  coltkey: String!
  columnHeading: String
  colvList: [Colv!]
  description: String!
}

"""
Colv
"""
type Colv {
  cdCompany: String!
  cdCountry: String!
  cdType: String!
  colt: Colt
  coltkey: String!
  flag1: String
  varValue: Float
}

type CombinedAgmCandidate {
  avatarImagePath: String
  candidateBiography: String
  cdCategory: String
  cdCompany: String!
  cdCountry: String
  displayName: String
  electionStatement: String
  hyperlinkTitle: String
  hyperlinkUrl: String
  membkey: String!
  publisherContactName: String
  sortName: String
  year: Float!
}

input CommitCwrFilesInput {
  fileFullNames: [String!]!
}

enum CompanyType {
  AMCOS
  APRA
  PRINT
}

type Config {
  key: String!
  value: String!
}

type ConfirmApplication {
  code: String!
  confirmDate: DateTime
  emailSentDate: DateTime
  id: Float!
  linkKey: String!
  rcsbkey: String!
  reminderEmailSentDate: DateTime
  status: ClientConfirmStatus!
  uid: String!
}

input ConfirmApplicationInput {
  code: String!
  key: String!
}

type ConfirmApplicationSearchOutput {
  items: [ConfirmApplication!]!
  total: Int!
}

enum ContentDisposition {
  ATTACHMENT
  INLINE
}

enum ContentTypes {
  BMP
  CSV
  DOC
  DOCX
  ICO
  JPEG
  MP3
  PDF
  PNG
  TXT
  UNKNOWN
  WAV
  XLS
  XLSX
}

input ContributionDetail {
  firstname: String
  fullname: String
  ipinumber: String
  lastname: String
  memberId: String
  role: ContributorRoleCategory!
  share: Float!
}

enum ContributorRoleCategory {
  A
  AR
  C
  CA
}

type Country {
  ThreeLettersCountryCode: String
  auTaxRate: Float!
  countryCode: String!
  name: String!
  numericCountryCode: String
  nzTaxRate: Float!
  ynExportRoyalties: String!
}

enum CountryOfPerformance {
  AU
  NZ
}

input CreateAdminInput {
  accesses: [Access!]!
  email: String!
  firstName: String!
  lastName: String!
  role: Role!
  subAccesses: [SubAccess!]!
}

input CreateAgreementInput {
  agreementType: AgreementType
  assigneeIpnamenumber: String!
  assignorIpnamenumber: String!
  rightType: RightType
}

input CreateEnquiryEmailInput {
  agreementNameOrId: String
  attachments: [S3DownloadInputWithOriginalFileName!]!
  enquiryContent: String!
  memberId: String!
  otherTopic: String
  selectedMemberId: String!
  topic: EnquiryTopics!
  workId: String
}

input CreateMemberCwrAccessInput {
  ccs: [String!]
  codes: [String!]!
  emails: [String!]!
  memberId: String!
  sftpFolderName: String!
}

input CreateNewApplicationInput {
  icciKey: String!
  rcsbInput: RcsbInput!
}

type CreateNewApplicationOutput {
  licenceNumber: String!
  totalPrice: Float
}

input CreatePortalUserInput {
  email: String!
  firstName: String
  lastName: String
  memberAccesses: [NewMemberAccess!]!
}

input CreateProductionMusicMemberJoinInput {
  abn: String
  cdCountry: String!
  companyAddress: WriterJoinAddressInput
  companyName: String
  fax: String
  industry: Industry!
  mobile: String
  nzbn: String
  personalAddress: WriterJoinAddressInput!
  telephone: String!
  title: String!
  tradingName: String
}

input CreatePublisherFeedbackInput {
  feedbackContent: String!
  feedbackNature: PublisherFeedbackNature!
  memberId: String!
}

input CreatePublisherPortalNewsInput {
  imagePath: String!
  linkUrl: String
  newsDetail: String
  publishDate: DateTime!
  title: String!
}

input CreateSetListInput {
  memberId: String
  title: String!
  tracks: [CreateSetListTrack!]!
}

input CreateSetListTrack {
  duration: Float
  title: String
  workId: String!
  writers: String
}

enum CueSheetCategory {
  EP
  FM
  IN
  TE
}

input CueSheetSearchInputWithMemberId {
  categories: [CueSheetCategory!]
  episodeNumber: String

  """
  Member ID for validateMember decorator
  """
  memberId: String!

  """
  pagination skip
  """
  skip: Float = 0
  subtitle: MultiTypeKeyword

  """
  pagination count
  """
  take: Float = 12
  title: MultiTypeKeyword
  year: String
}

type CueSheetSearchResult {
  cueSheets: [cueSheetSearch!]!
  total: Float!
}

enum Currency {
  AUD
  CAD
  CHF
  DKK
  EUR
  FJD
  GBP
  HKD
  IEP
  IRD
  JPY
  MUR
  NOK
  NZD
  PGK
  SEK
  SGD
  SID
  THB
  TOP
  USD
  VND
  VUV
  WST
  ZAR
}

type CurrentDistributionOutput {
  auDistLPR: String!
  auDistLabel: String!
  auDistMonth: String!
  auDistYear: String!
  nzDistLPR: String!
  nzDistLabel: String!
  nzDistMonth: String!
  nzDistYear: String!
}

enum CwrFileType {
  ACK
  ORI
  REJ
}

type CwrRecord {
  createdDate: DateTime
  extension: String!
  fileFullName: String!
  fileName: String!
  fileType: String!
  id: Float!
  inputCwrFile: CwrRecord!
  member: Member!
  memberId: String!
  outputCwrFiles: [CwrRecord!]
  referencedInputFileId: Float
  sftpDate: DateTime
  status: CwrStatus!
  uid: String!
  updatedDate: DateTime
  uploadedBy: String!
  uploadedFrom: UploadedFrom
}

enum CwrStatus {
  PENDING
  PROCESSED
  PROCESSING
  UPLOADING
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteSubmissionInput {
  distributionId: String!
  isLoginFromApp: Boolean = false
  memberId: String!
  submissionId: String!
}

enum DistributionCountry {
  Australia
  NewZealand
}

type DistributionDetailsOutput {
  sharerCategory: String
  topEarningByDSP: [DistributionHistoryOutput!]
  topEarningByProgram: [DistributionHistoryOutput!]
  topEarningByTerritory: [DistributionHistoryOutput!]
}

type DistributionDetailsSummaryOutput {
  breakdownData: BreakdownData
  hasForeignAdjustments: Boolean
  summaryData: DistributionHistoryOutput
}

type DistributionDetailsTopAudioVisualOutput {
  client: String
  dataBatchId: String
  dataBatchLineNumber: String
  dataBatchPeriodEnd: DateTime
  dataBatchPeriodStart: DateTime
  digitalServiceProvider: String
  directPayeeInternational: Boolean
  distributionCategory: String
  distributionCategoryDetails: String
  distributionCountry: String
  distributionCurrency: String
  distributionDate: String
  distributionLabel: String
  distributionSociety: String
  distributionSource: String
  distributionSourceCode: String
  distributionType: String
  exploitationTerritoryCode: String
  exploitationTerritoryName: String
  exploitationTime: DateTime
  grossRoyaltyAmount: String
  isrc: String
  iswc: String
  memberFirstNames: String
  memberId: String
  memberSurname: String
  netRoyaltyAmount: String
  originalDistributionLabel: String
  performanceCount: String
  performanceDetails: String
  productionCategory: String
  productionId: String
  productionPerformers: String
  productionTitle: String
  programmeEpisodeNo: String
  programmeId: String
  programmeSeasonNo: String
  programmeSubTitle: String
  programmeTitle: String
  programmeType: String
  reportedPeriodEnd: DateTime
  reportedPeriodStart: DateTime
  reportedSharePercent: String
  reportingCurrency: String
  reportingSociety: String
  reportingSocietyCountry: String
  rightHolderId: String
  rightHolderName: String
  rightType: String
  royaltyBasePrice: String
  sharePercentage: String
  sharerCategory: String
  source: String
  total: Float!
  transactionType: String
  workCategory: String
  workId: String
  workTitle: String
  writers: String
}

type DistributionDetailsTopWorksAndCategoryOutput {
  earningByCategory: [DistributionHistoryOutput!]!
  topEarningWorks: [DistributionHistoryOutput!]!
}

input DistributionHistoryInputTypeArray {
  cacheKey: String!
  details: [EIInputType!]!
  memberId: String!
  webSocketId: String!
}

type DistributionHistoryOutput {
  client: String
  dataBatchId: String
  dataBatchLineNumber: String
  dataBatchPeriodEnd: DateTime
  dataBatchPeriodStart: DateTime
  details: [DistributionHistoryOutput!]
  digitalServiceProvider: String
  directPayeeInternational: Boolean
  distributionCategory: String
  distributionCategoryDetails: String
  distributionCountry: String
  distributionCurrency: String
  distributionDate: String
  distributionLabel: String
  distributionSociety: String
  distributionSource: String
  distributionSourceCode: String
  distributionTerritory: String
  distributionType: String
  dspCategory: DspCategories
  exploitationTerritoryCode: String
  exploitationTerritoryName: String
  exploitationTime: DateTime
  grossRoyaltyAmount: String
  groupKey: String
  isrc: String
  iswc: String
  memberFirstNames: String
  memberId: String
  memberSurname: String
  netRoyaltyAmount: String
  originalDistributionLabel: String
  performanceCount: String
  performanceDetails: String
  productionCategory: String
  productionId: String
  productionPerformers: String
  productionTitle: String
  programmeEpisodeNo: String
  programmeId: String
  programmeSeasonNo: String
  programmeSubTitle: String
  programmeTitle: String
  programmeType: String
  reportedPeriodEnd: DateTime
  reportedPeriodStart: DateTime
  reportedSharePercent: String
  reportingCurrency: String
  reportingSocieties: [DistributionHistoryOutput!]
  reportingSociety: String
  reportingSocietyCountry: String
  rightHolderId: String
  rightHolderName: String
  rightType: String
  royaltyBasePrice: String
  sharePercentage: String
  sharePercentageNumber: Float
  sharerCategory: String
  source: String
  totalNetAmount: Float
  transactionType: String
  workCategory: String
  workId: String
  workTitle: String
  writers: String
}

type DistributionHistoryOutputArray {
  data: [DistributionHistoryOutput!]!
  from: String!
  memberId: String!
  to: String!
}

type DistributionNotes {
  distributionDate: DateTime!
  distributionLabel: String!
  publishedBy: String!
  publishedOn: DateTime!
  status: String!
}

type DistributionNotesDetails {
  content: String!
  createdBy: String!
  createdDate: DateTime!
  distributionLabel: String!
  noteStatus: String!
  publishTo: String!
  subject: String!
  updatedBy: String!
  updatedDate: DateTime!
}

type Document {
  displayTitle: String!

  """
  this is the unique identifier of the document, it should never change.
  """
  id: Int!

  """
  this is the filename in s3 without the prefix (folder)
  """
  resourceName: String

  """
  this is the url,  leave it null if want to use the S3 resourceName
  """
  url: String
}

type DocumentGroup {
  documents: [Document!]!
  groupTitle: String!
  order: Int!
}

enum DspCategories {
  AllPlatforms
  MusicStreaming
  OtherPlatforms
  SocialMediaUgc
  SubscriptionVod
  TransactionalVod
  Websites
}

input EIDateRangeType {
  Month: String!
  Year: String!
}

input EIInputType {
  from: String!
  to: String!
}

type Eben {
  amcos: EbenVacancy!
  apra: EbenVacancy!
  dtMeeting: DateTime!
  dtVotingEnd: DateTime!
  dtVotingStart: DateTime!
  isInVotePeriod: Boolean!
  isInVoteSession: Boolean!
  year: String!
}

type EbenVacancy {
  auWriVacancies: Float!
  noPubVacancies: Float!
  nzWriVacancies: Float!
}

enum ElasticSearchMigrationStatus {
  Cleaning
  Completed
  Deleted
  Failed
  Finalizing
  Pending
  Preparing
  Processing
  Publishing
}

enum ElasticSearchSourceRealtimeStatus {
  Disabled
  Enabled
  None
  Partial
}

enum ElasticSearchSourceStatus {
  Completed
  Pending
  Processing
}

enum EligibilityOptions {
  AvailableForPaidDownload
  AvailableForSaleOnCd
  AvailableOnStreamingService
  BroadCastedOnRadioOrTv
  NoneOfTheAbove
  PerformedLiveInPublic
  SignedToMusicPublisher
}

enum EnquiryTopics {
  Agreements
  ContactDetails
  CueSheets
  Disputes
  EarningsInsights
  Licensing
  OPUS
  Other
  ProductionMusic
  Registrations
  RoyaltyIncomeTrackingForeign
  RoyaltyIncomeTrackingLocal
  Works
}

enum Ethnicity {
  Aboriginal
  AboriginalMaori
  AboriginalPacificIslander
  AboriginalTorresStraitIslander
  CookIslander
  FijianIndian
  FijianMelanesian
  MaoriPacificIslander
  MaoriSamoan
  NewZealandMaori
  Niuean
  PacificIslander
  Samoan
  Tongan
  TorresStraitIslander
}

type ExtendedDetails {
  distributionAmount: String
  distributionBreakdown: [BreakdownInfo!]
  distributionCountry: String
  distributionCurrency: String
  distributionLabel: String
  distributionType: String
  frequency: String
  memberId: String
  royaltyAmount: String
  royaltyDate: String
  royaltyTaxAmount: String
  statementId: String
}

enum FeeType {
  Campaign
  CutDown
  Infomercial
  Prodfeeagreed
  Standard
  Tag
  Unitfeeagreed
}

"""
Portal relation mappings
"""
type Feedback {
  createdDate: DateTime
  feedbackContent: String!
  feedbackNature: PublisherFeedbackNature!
  id: Float!
  member: Member
  memberId: String!
  uid: String!
  updatedDate: DateTime
  user: User
}

input FetchCueSheetDetailInput {
  """
  cuepkey
  """
  cueSheetId: String!

  """
  memberId
  """
  memberId: String!
}

input FetchCwrHistoryInput {
  filename: String
  fromDate: DateTime
  memberId: String!
  skip: Float!
  submitters: [String!]
  take: Float!
  toDate: DateTime
}

type FetchCwrHistoryOutput {
  cwrRecords: [CwrRecord!]!
  total: Float!
}

type FetchCwrSubmittersOutput {
  firstName: String
  lastName: String
  uid: String
  uploadedFrom: String
}

input FetchProductionDetailInput {
  """
  prodkey
  """
  id: ID!

  """
  memberId
  """
  memberId: String!
}

input FetchWorkDetailInput {
  """
  memberId
  """
  memberId: String!

  """
  winfkey
  """
  workId: String!
}

input FetchWorkDetailSharersInput {
  """
  memberId
  """
  memberId: String!

  """
  registration prwhrrn
  """
  registrationId: String!
}

input FinancialDashboardDataInput {
  cacheKey: String!
  from: String!
  memberId: String!
  royaltyMemberId: String
  to: String!
  webSocketId: String!
}

type FinancialDashboardDataOutput {
  adjustments: Float
  audAmount: String
  bctiTotal: Float
  details: [ExtendedDetails!]
  discrepancy: Float
  displayRoyaltyDetails: Boolean
  distributionCountry: String
  distributionCurrency: String
  distributionTotal: Float
  documentType: String
  journalDate: String
  journalDescription: String
  journalReference: String
  memberAbnIrd: String
  memberId: String
  nzdAmount: String
  paymentStatus: PaymentStatus
  rctiTotal: Float
  remittanceAdviceCurrency: String
  remittanceAdviceTotal: Float
  royaltyIntlTotal: Float
  royaltyMemberId: String
  royaltyTotal: Float
  statementDate: String
  statementId: String
  statementYearMonth: String!
  taxType: String
  uniquifier: String
}

type FormProgress {
  status: JoinStepStatus!
  step: JoinStepIdentifier!
}

enum Gender {
  FEMALE
  MALE
  NON_Binary
  TRANS_FEMALE
  TRANS_MALE
}

type GeneralOrphanedType {
  knownErrorTypes: KnownErrorTypes!
  subscriptionFunctionName: SubscriptionFunctionName!
}

input GeneratePdfInput {
  contentDisposition: ContentDisposition
  customisedFontFamily: PDFCustomisedFontFamily
  expireS3Url: Float
  fileName: String!
  html: String
  htmlContentType: HtmlContentType
  pdfComponentName: PDFComponentName
  pdfOptions: JSONObject
  s3FileType: S3FileType!
}

enum Genre {
  AlternativeIndie
  Ambient
  Artmusic
  BluesAndRoots
  Children
  ChristianGospel
  Classical
  Country
  Dance
  Electronic
  Folk
  Heavy
  HiphopRap
  Intercultural
  Jazz
  Jingle
  MusicalTheatre
  Pop
  Reggae
  Rock
  Screen
  Soul
}

input GetAGMDocumentSignedURLInput {
  name: String!
  type: String!
}

input GetApplicationHistoryInput {
  fromDate: DateTime
  icciKey: String!
  page: Int = 1
  pageSize: Int = 10
  toDate: DateTime
}

type GetApplicationHistoryOutput {
  rcsbList: [Rcsb!]!
  total: Int!
}

input GetBusinessMappingInputType {
  access: Access
  names: [BusinessRules!]!
}

type GetCandidatesOutput {
  candidates: [CombinedAgmCandidate!]!
}

input GetCwrDownloadUrlInput {
  contentDisposition: ContentDisposition
  contentType: String
  fileFullName: String!
  fileType: CwrFileType!
  memberId: String!
}

input GetCwrUploadUrlInput {
  fileFullName: String!
  isCheckDuplicates: Boolean
  memberId: String!
}

input GetDistributionNotesDetailsInput {
  """
  omit this field ONLY for admin
  """
  distributionLabel: String
  page: Float
  pageSize: Float
}

type GetDistributionNotesDetailsOutput {
  noteDetails: [DistributionNotesDetails!]!
  total: Int!
}

input GetDistributionNotesInput {
  distributionLabel: String
  page: Float
  pageSize: Float
}

type GetDistributionNotesOutput {
  notes: [DistributionNotes!]!
  total: Int!
}

input GetJingleSignedURLInput {
  memberId: String
  name: String!
  type: String!
  workId: String
}

"""
GetMemberDetailResult
"""
type GetMemberDetailResult {
  addressDetails: [MemberAddressDetails!]
  bankDetails: MemberBankDetails
  personalDetails: MemberPersonalDetails
}

input GetPublisherFeedbackInput {
  feedbackNature: PublisherFeedbackNature!
  page: Float!
  pageSize: Float!
}

type GetPublisherFeedbackOutput {
  feedbacks: [Feedback!]!
  total: Int!
}

input GetPublisherPortalNewsInput {
  """
  omit this field ONLY for admin
  """
  memberId: String
  page: Float!
  pageSize: Float!
}

type GetPublisherPortalNewsOutput {
  news: [News!]!
  total: Int!
}

type GetQuoteOutput {
  auCodeList: [TerritoryCode!]!
  colvList: [Colv!]!
  nzCodeList: [TerritoryCode!]!
}

input GetSotySongsInput {
  eventId: Int
  page: Int = 1
  pageSize: Int = 10
  searchKeyword: String
  seedFactor1: Int = 1
  seedFactor2: Int = 1
  sortOptions: GetSotySongsSortOption
}

type GetSotySongsOutput {
  count: Int!
  eventId: Float
  songs: [SotySong!]
}

enum GetSotySongsSortKey {
  Artist
  Title
}

input GetSotySongsSortOption {
  sortKey: GetSotySongsSortKey!
  sortOrder: GetSotySongsSortOrder = ASC
}

enum GetSotySongsSortOrder {
  ASC
  DESC
}

type GetUserSotyEventOutput {
  fromDate: DateTime!
  id: Float!
  secondsToComplete: Float!
  sotyTemplate: SotyTemplate!
  status: SotyEventStatus!
  toDate: DateTime!
}

input GetWorkDetailAndAudiosInput {
  dateFrom: String!
  dateTo: String!
  isDateSearch: Boolean!
  workId: String!
}

enum HtmlContentType {
  GENERATE
  RAW
  ZIPPED_BASE64
}

"""
Iccd
"""
type Iccd {
  addressNo: Float
  cdSource: String
  cdTitle: String
  comment: String
  contactNo: Float
  crmIdentifier: String
  department: String
  email: String
  icciKey: String
  otherNames: String
  phoneArea: String
  phoneNumber: String
  position: String
  productionMusicMember: Icci
  surname: String
  ynBusinessEmail: String
  ynNonBusinessEmail: String
}

"""
Icci
"""
type Icci {
  abn: String
  atmUnallMr: Float
  atmUnallPr: Float
  balOutstanding: Float
  balSecurity: Float
  bankAccount: String
  bankBsb: String
  cdActive: String
  cdCountry: String
  cdCurrency: String
  cdExemptStatus: String
  cdInvoiceMedium: String
  cdPaymentPlan: String
  cdSector: String
  cdSource: String
  cdState: Float
  crmIdentifier: String
  curAddressNo: Float
  curContactNo: Float
  curInvoiceNo: Float
  curLicenceNo: Float
  ddexPartyIdent: String
  dt_created: DateTime
  iccdList: [Iccd!]
  icciKey: String
  iclhList: [Iclh!]
  legalName: String
  mi3pIdentifier: String
  tempImportFile: String
  tradingName: String
  userProductionMusicAccesses: [UserProductionMusicAccess!]
  webUrl: String
  ynDdexRefReuse: String
  ynGstExempt: String
  ynInvoice: String
  ynReassessable: String
  ynReassessed: String
  ynTrustedSender: String
}

"""
Iclh
"""
type Iclh {
  cdCompany: String
  cdCountry: String
  cdInvoiceFully: String
  colbkey: String
  crmIdentifier: String
  dtAgreement: DateTime
  dtTerminated: DateTime
  icciKey: String!
  licenceNo: Float!
  productionMusicMember: Icci
}

enum Industry {
  AdAgency
  BroadcasterTvRadio
  ContentCreator
  FilmTv
  GamesAppsPlatforms
  MusicSupervisor
  OtherBusiness
}

input InvoicePaymentPDFInput {
  documentType: PaymentsDocTypes!
  memberId: String!
  messageId: String!
  statementYearMonth: String!
  utcOffset: Float
  webSocketId: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Jingle {
  bmatStatus: JingleStatus!
  createdByMember: String!
  createdByUID: String
  file: UserFile!
  fileId: Float!
  id: Float!
  soundmouseStatus: JingleStatus!
  work: Winf
  workId: String!
}

input JingleAdminSearchWorkInput {
  dateFrom: String!
  dateTo: String!
  deletedOnly: Boolean!
  order: String!
  orderBy: String!
  page: Float!
  rowsPerPage: Float!
  searchType: String!
  workTitleOrId: String!
}

type JingleAdminSearchWorkOutput {
  count: Float!
  works: [SimpleJingleWork!]!
}

input JingleDownloadInput {
  formattedName: String!
  memberId: String
  workId: String
}

enum JingleFileStatus {
  DELETE
  EXCLUDE
  FAIL
  PENDING
  PROCESSING
  SUCCESS
}

enum JingleSaveStatus {
  FAIL
  PARTIAL_SUCCESS
  SUCCESS
}

type JingleStatus {
  errorMessage: String
  groupId: String
  jingle: Jingle
  jingleStatusId: Float!
  status: JingleFileStatus!
  trackId: String
  updatedDate: DateTime
}

enum JoinStepIdentifier {
  AddressDetails
  AssignmentOfRights
  BankDetails
  BusinessDetails
  ContactDetails
  Eligibility
  ExclusiveLicenseAgreement
  Genre
  GrantOfAuthority
  ParentConsent
  PerformerDetails
  PersonalDetails
  ReviewFormUntilGenre
  SubmitApplication
  Territory
}

enum JoinStepStatus {
  Complete
  Incomplete
  NotRequired
}

enum KnownErrorTypes {
  AGM_VOTE_ERROR
  API_GATEWAY_DEFAULT_5XX
  API_GATEWAY_INTEGRATION_TIMEOUT
  API_GATEWAY_UNAUTHORIZED
  CREATE_ENQUIRY_EMAIL_ERROR
  CUESHEET_SEARCH_ERROR
  CWR_ADMIN_ERROR
  CWR_ERROR
  EARNINGS_INSIGHTS_ERROR
  EDIT_MEMBER_DETAILS_ERROR
  FINANCIAL_ERROR
  JINGLE_ERROR
  OUTAGE_ERROR
  PRODUCTION_MUSIC_PORTAL_ERROR
  PUBLISHER_WORK_AUDIO_UPLOAD_ERROR
  S3_ERROR
  SOTY_ERROR
  USER_OPERATION_ERROR
  WORK_SEARCH_ERROR
  WRITER_PORTAL_ERROR
}

input LandingPagePDFInputType {
  businessMappingRules: GetBusinessMappingInputType!
  fileName: String!
  fullName: String!
  ipiNumber: String!
  memberId: String!
  messageId: String!
  pdfComponentName: PDFComponentName!
  pdfDateRange: EIDateRangeType!
  pdfOptions: JSONObject
  reportDateRange: [EIInputType!]!
  startDay7YearsByCountry: String!
  summaryDateRange: [EIInputType!]!
  utcOffset: Float
  webSocketId: String!
}

type Member {
  auditModifiedDate: DateTime
  company: String
  cwrRecords: [CwrRecord!]
  dateOfBirth: String
  dateOfDeath: String
  dateOfJoining: String
  dateOfJoiningAmcos: String
  dateOfJoiningAmcosCalculated: String
  dateOfTerminatedAmcos: String
  email: String
  firstName: String
  fullName: String!
  fullNameReverse: String
  ipiNumber: String
  isEligibleForSoty: Boolean
  lastName: String
  memberCategory: MemberCategories!
  memberCwrAccess: MemberCwrAccess
  memberId: String!
  memberVoteAccess: MemberVoteAccess
  publisherFeedbacks: [Feedback!]
  userMemberAccesses: [UserMemberAccess!]
}

enum MemberAccessStatuses {
  Active
  Inactive
  Pending
}

type MemberAddressDetails {
  address2: String
  address3: String
  address4: String
  cdType: String!
  countryName: String
  ctrykey: String
  postcode: String
  state: Float
  stateName: String
}

input MemberAddressDetailsUpdate {
  address1: String
  address2: String
  address3: String
  address4: String
  cdType: String!
  ctrykey: String
  membkey: String
  postcode: String
  state: Float
}

type MemberBands {
  bands: [Band!]!
  memberId: String!
}

type MemberBankDetails {
  accountName: String
  accountNumber: String!
  address1: String
  bankName: String
  bsb: String
  countryName: String
  currencyName: String
  iban: String
  interBankAddress: String
  interBankName: String
  routingNumber: String
  swiftCode: String
}

input MemberBankDetailsUpdate {
  accountName: String!
  accountNumber: String!
  address1: String
  bankName: String
  bsb: String
  cdCountry: String!
  cdPaidBy: String
  currency: String
  iban: String
  interBankAddress: String
  interBankName: String
  membkey: String
  routingNumber: String
  swiftCode: String
}

enum MemberCategories {
  NC
  Pseudonym
  Publisher
  ST
  SubPublisher
  Writer
}

type MemberContactDetails {
  address: String
  companyName: String
  contactType: String
  email: String
  fax: String
  id: String
  isContactEmail: Boolean
  isDeleted: Boolean
  mobile: String
  name: String
  phone: String
}

input MemberContactDetailsInput {
  address: String
  companyName: String
  contactType: String
  email: String
  fax: String
  id: String
  isContactEmail: Boolean
  isDeleted: Boolean
  mobile: String
  name: String
  phone: String
}

type MemberCwrAccess {
  ccs: [String!]
  codes: [String!]!
  createdDate: DateTime
  deletedDate: DateTime
  emails: [String!]!
  id: Float!
  member: Member
  memberId: String!
  sftpFolderName: String!
  updatedDate: DateTime
}

type MemberDetails {
  addressDetails: [BaseMemberAddressDetails!]
  bankDetails: BaseMemberBankDetails
  companyDetails: [BaseMemberCompanyDetails!]
  contactDetails: [MemberContactDetails!]
  entityDetails: MemberEntityDetails
  memberId: String!
  socialLinks: MemberExtraInfoSocialLinks
}

type MemberEntityDetails {
  abn: String
  cellPhone: String
  dateOfBirth: DateTime
  email: String
  firstName: String
  ipiNumber: String!
  isEnotice: Boolean!
  isGstRegistered: Boolean!
  legalName: String
  memberId: String!
  phoneHome: String
  phoneWork: String
  surname: String
}

input MemberEntityDetailsInput {
  email: String
  phoneWork: String
}

type MemberExtraInfoSocialLinks {
  Facebook: String
  Instagram: String
  LinkedIn: String
  Others: String
  TikTok: String
  Twitter: String
  Website: String
  YouTube: String
  memberId: String!
}

input MemberExtraInfoSocialLinksInput {
  Facebook: String
  Instagram: String
  LinkedIn: String
  Others: String
  TikTok: String
  Twitter: String
  Website: String
  YouTube: String
  memberId: String!
}

enum MemberJoinEmailCheckResponse {
  APPLICATION_NOT_FINISHED
  EXISTING_MEMBER
  EXISTING_USER_APPLICATION_SUBMITTED
  NAME_ALREADY_EXIST
  NEW_USER_APPLICATION_SUBMITTED
  PRIMARY_USER
  REGISTER_EMAIL_SENT
  SECONDARY_USER
}

type MemberPersonalDetails {
  cdTitle: String
  cdTitleName: String
  cellPhone: String
  dtBirth: String
  email: String
  firstNames: String
  membkey: String!
  phoneHome: String
  phoneWork: String
  surname: String
  wrthkey: String
}

input MemberPersonalDetailsUpdate {
  cellPhone: String!
  email: String!
  membkey: String
  phoneHome: String
  phoneWork: String
}

input MemberSearchWithPaginationInput {
  filters: [AdminSearchMemberFilters!]
  memberCategories: [MemberCategories!] = [Publisher, Writer, ST]
  order: String = "ASC"
  orderBy: String = "memberId"
  page: Int = 0
  rowsPerPage: Int = 10
  searchString: String!
}

type MemberSearchWithPaginationOutput {
  count: Int!
  members: [Member!]!
}

type MemberVoteAccess {
  allowLink: Boolean!
  allowView: Boolean!
  voteInfos: [VoteInfo!]
}

input MultiTypeKeyword {
  inputType: TitleInputType!
  keyword: String!
}

type Mutation {
  UpdateClaim(updateClaimInput: UpdateClaimInput!): UpdateClaimOutput!
  addNewClaimForMobile(addNewClaimInput: AddNewClaimInput!): AddNewClaimOutput!
  adminChangeThirdPartySendStatus(excluded: Boolean!, jingleId: Float!): Jingle
  adminDeleteJinglesByIds(jingleIds: [Float!]!): [UserFile!]
  adminDeleteJinglesInThirdParty(jingleIds: [Float!]!): Boolean
  attachJinglesToPublisherWork(
    memberId: String
    s3UploadInputs: [S3UploadInput!]!
    workId: String!
  ): SubmitJingleResponse!
  attachJinglesToWriterWork(
    memberId: String
    s3UploadInputs: [S3UploadInput!]!
    workId: String!
  ): SubmitJingleResponse!
  castSotyMemberVote(castSotyMemberVoteInput: CastSotyMemberVoteInput!): SotyMemberVote!
  castVote(castVoteInput: CastVoteInput!): [VoteTicket!]!
  castVotePerformance(castVoteInput: CastVoteInput!): [VoteTicket!]!
  checkAgmEmailStatus: Boolean!
  # commitCwrFiles(commitCwrFilesInput: CommitCwrFilesInput!, memberId: String!): [String!]!
  # confirmApplication(confirmApplicationInput: ConfirmApplicationInput!): Boolean!
  # createAdminUser(createApraAdminInput: CreateAdminInput!): [User!]!
  # createAgreement(agreementType: CreateAgreementInput!): AgreementOutput
  # createDistributionNotes(createDistributionNotesInput: CUDistributionNotesInput!): Boolean
  # createDistributionNotesDetails(createDistributionNotesDetailsInput: CUDistributionNotesDetailsInput!): Boolean
  # createElasticSearchPresetConnector: Boolean
  # createEnquiryEmail(createEnquiryEmailInput: CreateEnquiryEmailInput!): Boolean
  # createMemberCwrAccess(createMemberCwrAccessInput: CreateMemberCwrAccessInput!): Member!
  # createOrUpdateSotyEvent(sotyEventInput: SotyEventInput!): SotyEvent!
  # createPortalUser(createPortalUserInput: CreatePortalUserInput!): User!
  # createPortalUserFromAdmin(createPortalUserInput: CreatePortalUserInput!): Boolean
  # createProductionMusicMemberJoin(createProductionMusicMemberJoinInput: CreateProductionMusicMemberJoinInput!): User!
  # createPublisherFeedback(createPublisherFeedbackInput: CreatePublisherFeedbackInput!): Boolean
  # createPublisherPortalNews(createPublisherPortalNewsInput: CreatePublisherPortalNewsInput!): Boolean
  # createSetList(createSetListInput: CreateSetListInput!): ViewSetListsOutput!
  # deleteAdminUser(uid: String!): [User!]!
  # deleteCandidateAvatar(fileName: String!): Boolean!
  # deleteCwrFile(fileFullName: String!, memberId: String!): [String!]!
  # deleteDistributionNotes(distributionLabel: String!): Boolean!
  # deleteDistributionNotesDetails(distributionLabel: String!): Boolean!
  # deleteElasticSearchPresetConnector: Boolean
  # deleteNewsImage(fileName: String!): Boolean!
  # deleteOutageBannerConfig(isApp: Boolean!): Boolean
  # deletePublisherFeedback(id: String!): Boolean
  # deletePublisherPortalNews(id: String!): Boolean!
  # deleteSotyMemberVote(memberId: String!): Boolean
  # deleteSubmission(deleteSubmissionInput: DeleteSubmissionInput!): Boolean!
  # giveUserRegisterNewMemberAccess: User!
  # giveUserRegisterProductionMusicAccess: User!
  # linkPushTokenWithMember(memberId: String!, token: String!): PushTokenAssociationResult!
  # migrateElasticSearchSource(name: String!): Boolean
  # newProductionMusicRegister(newWriterRegisterInput: NewWriterRegisterInput!): Boolean!
  # newWriterRegister(newWriterRegisterInput: NewWriterRegisterInput!): MemberJoinEmailCheckResponse!
  # pushOutageMessage(pushOutageMessageInput: PushOutageMessageInput!): Boolean
  # recreatePendingPortalUser(uid: String!): String!
  # registerWork(registerWorkInput: RegisterWorkInput!): RegisterWorkResult!
  # registerWorkForMobileLambda(registerWorkInput: RegisterWorkInput!): RegisterWorkResult!
  # reloadElasticSearchSource(name: String!): Boolean
  # removeAccountFromAdmin(uidOrEmail: String!): Boolean
  # removeMemberCwrAccess(memberCwrAccessId: Int!): String!
  # removeProductionMusicRegister: User!
  # removeSetList(removeSetListInput: RemoveSetListInput!): Boolean!
  # removeWriterRegister: User!
  # resendAGMVotingEmails: Boolean!
  # resetPortalUserPasswordFromAdmin(uid: String!): Boolean
  # resetVotePerformance(resetVoteInput: ResetVoteInput!): Boolean!
  # saveAgmCandidate(saveAgmCandidateInput: SaveAgmCandidateInput!): AgmCandidates!
  # saveCwrRecord(cwrRecordInput: SaveCwrRecordInput!, memberId: String!): CwrRecord!
  # saveUserAccesses(saveUserAccessInput: SaveUserMemberAccessesInput!): User!
  # saveUserAccessesFromAdmin(saveUserAccessInput: SaveUserMemberAccessesInput!): Boolean
  # saveUserFirstNameAndLastName(saveUserFirstNameAndLastNameInput: SaveUserFirstNameAndLastNameInput!): User!
  # saveUserLoginHistory(isLoginFromApp: Boolean = false, memberId: String!): Boolean!
  # setUserAsPrimaryWriter(superAdminSetUserAsPrimaryWriterInput: SuperAdminSetUserAsPrimaryWriterInput!): String!
  # shutdownPortal(isShutdown: Boolean!): Boolean
  # submitApplicationToCms: Boolean
  # submitFormToCms(signature: String!): String!
  # submitJingles(memberId: String, s3UploadInputs: [S3UploadInput!]!, workId: String!): SubmitJingleResponse!
  # submitJoinAmcosToCms(writerMemberJoinAmcosInput: WriterMemberJoinAmcosInput!): Boolean!
  # submitNewApplication(createNewApplicationInput: CreateNewApplicationInput!): CreateNewApplicationOutput!
  # syncEbenData: Boolean!
  # unlinkPushTokenWithMember(memberId: String!, token: String!): PushTokenAssociationResult!
  # updateAGMDocumentList(agmDocumentInput: [AGMDocumentInput!]!): [AGMDocument!]!
  # updateAddressDetails(addressDetailsInput: WriterJoinAddressDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateAdminUser(updateAdminInput: UpdateAdminInput!): [User!]!
  # updateAdminUserAfterCompleteChallenge: User!
  # updateAmcosTerritory(territory: Territory!, timestamp: String!): UpdateStepResponse!
  # updateBankDetails(bankDetailsInput: WriterJoinBankDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateBusinessDetails(businessDetailsInput: WriterJoinBusinessDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateContactDetails(contactDetailsInput: WriterJoinContactDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateDistributionNotes(updateDistributionNotesInput: CUDistributionNotesInput!): Boolean!
  # updateDistributionNotesDetails(updateDistributionNotesDetailsInput: CUDistributionNotesDetailsInput!): Boolean!
  # updateEligibility(eligibilityInput: WriterJoinEligibilityInput!, timestamp: String!): UpdateStepResponse!
  # updateFormProgress(identifier: JoinStepIdentifier!, timestamp: String!): UpdateStepResponse!
  # updateGenreDetails(genreDetailsInput: WriterJoinGenreDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateMemberCwrAccess(updateMemberCwrAccessInput: UpdateMemberCwrAccessInput!): Member!
  # updateMemberDetailsLambda(updateMemberDetailsInput: UpdateMemberDetailsInput!): Boolean
  # updateParentConsent(parentConsentInput: WriterJoinParentConsentInput!, timestamp: String!): UpdateStepResponse!
  # updatePerformerDetails(performerDetailsInput: WriterJoinPerformerDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updatePersonalDetails(personalDetailsInput: WriterJoinPersonalDetailsInput!, timestamp: String!): UpdateStepResponse!
  # updateProductionMusicMemberJoin(updateProductionMusicMemberJoinInput: UpdateProductionMusicMemberJoinInput!): ProductionMusicMemberJoin
  # updatePublisherAddressDetails(memberId: String!, publisherAddressDetailsInput: [BaseMemberAddressDetailsInput!]!): [BaseMemberAddressDetails!]!
  # updatePublisherBankDetails(memberId: String!, publisherBankDetailsInput: BaseMemberBankDetailsInput!): BaseMemberBankDetails!
  # updatePublisherContactDetails(memberId: String!, publisherContactDetailsInput: [MemberContactDetailsInput!]!): [MemberContactDetails!]
  # updatePublisherEntityDetails(memberId: String!, publisherEntityDetailsInput: MemberEntityDetailsInput!): MemberEntityDetails!
  updatePublisherPortalNews(
    updatePublisherPortalNewsInput: UpdatePublisherPortalNewsInput!
  ): Boolean!
  updatePublisherSocialLinks(
    socialLinkInput: MemberExtraInfoSocialLinksInput!
  ): MemberExtraInfoSocialLinks!
  updateSetList(updateSetlistInput: UpdateSetListInput!): Boolean!
  updateSotyEventStatus(eventId: Int!, eventStatus: SotyEventStatus!): SotyEvent!
  # updateUserAfterCompleteChallenge: User!
  # updateUserEmailByUid(email: String!, uid: String!): User
  updateUserNameByUid(firstName: String!, lastName: String!, uid: String!): Boolean
  updateWorkDetailsForMobileLambda(updateWorkDetailsInput: UpdateWorkDetailsInput!): Boolean!
  updateWorkDetailsLambda(updateWorkDetailsInput: UpdateWorkDetailsInput!): Boolean!
  updateWriterAgreeSubmissionTcDate: Boolean
}

input NewMemberAccess {
  accesses: [PortalAccesses!]
  memberId: String!
}

input NewWriterRegisterInput {
  email: String!
  firstName: String!
  ignoreNameCheck: Boolean = false
  lastName: String!
}

"""
Portal relation mappings
"""
type News {
  createdDate: DateTime
  id: Float!
  imagePath: String!
  linkUrl: String
  newsDetail: String
  publishDate: DateTime!
  title: String!
  updatedDate: DateTime
}

enum OpusStatus {
  ALL_STATUS
  AUDIO_MODIFIED
  AUDIO_SAVED
  AUDIO_SUBMITTED
  NO_AUDIO
  UNCONFIRMED_MODIFIED
  UNCONFIRMED_SAVED
  UNCONFIRMED_SUBMITTED
}

enum OutputDocTypes {
  CSV
  EXCEL
  PDF
}

enum PDFComponentName {
  EI_LANDING_PAGE
  EI_REPORT_OVERVIEW
  ROYALTIES_INVOICE_RCTI_BCTI
  ROYALTIES_PAYMENT_SUMMARY
  ROYALTIES_REMITTANCE_ADVICE
  ROYALTIES_STATEMENT
}

enum PDFCustomisedFontFamily {
  DEFAULT_FONT_SETS
}

input PaginationSearchInput {
  page: Int = 1
  pageSize: Int = 10
}

enum PaymentStatus {
  Duplicate
  EFTReturned
  Paid
}

input PaymentSummaryPDFInput {
  countryInput: String!
  documentType: PaymentsDocTypes!
  from: String!
  memberFullName: String!
  memberId: String!
  messageId: String!
  to: String!
  utcOffset: Float
  webSocketId: String!
}

enum PaymentType {
  D
  L
  T
}

enum PaymentsDocTypes {
  BCTI
  PaymentSummary
  RCTI
  RemittanceAdvice
}

enum PerformanceTypes {
  CLASSICORJAZZ
  DJ
  OTHERS
}

input PerformedWorkDetail {
  duration: Int = 0
  timePerformed: Int!
  title: String!
  uniquifier: String
  workId: String
  writers: String!
}

type Pmph {
  pmpwList: [Pmpw!]
  pmsd: Pmsd
  title: String!
}

input PmphInput {
  inputStudio: String
  pmpwInputs: [PmpwInput!]!
  title: String!
}

type Pmpw {
  duration: Float
  pmph: Pmph
  pmphKey: String
  sequence: Float
  winf: Winf
  workTitle: String
  workWriters: String
}

input PmpwInput {
  catalogueNumber: String
  duration: Float!
  winfKey: String
  workTitle: String!
  workWriters: String!
}

"""
Pmsd
"""
type Pmsd {
  cdTerritory: String
  coltKey: String
  noUnits: Float
  noVersions: Float
  pmph: Pmph
}

input PmsdInput {
  cdFee: FeeType!
  cdTerritory: String!
  coltKey: String!
  noVersions: Float!
  pmphInput: PmphInput!
  productionType: ProductionMusicProductionType!
}

type PortalAccessOrphanedType {
  publisherPortalAccessesForAdmin: PublisherPortalAccessesForAdmin!
  publisherPortalAccessesForPortal: PublisherPortalAccessesForPortal!
  stPortalAccessesForAdmin: StPortalAccessesForAdmin!
  stPortalAccessesForPortal: StPortalAccessesForPortal!
  writerPortalAccessesForAdmin: WriterPortalAccessesForAdmin!
  writerPortalAccessesForPortal: WriterPortalAccessesForPortal!
}

enum PortalAccesses {
  ClaimAndRegister
  Financial
  Primary
  Register
  Search
  TeamAdmin
  Voting
}

enum PortalAccessesForAdmin {
  ClaimAndRegister
  Financial
  Primary
  Register
  Search
  TeamAdmin
  Voting
}

enum PortalAccessesForPortal {
  ClaimAndRegister
  Financial
  Register
  Search
}

type ProductionDetail {
  artist: String!
  compilation: String
  countryOfManufacture: String
  countryOfManufactureKey: String
  countryOfOrigin: String
  countryOfOriginKey: String
  countryOfRelease: String
  countryOfReleaseKey: String
  dateEntered: DateTime
  format: String!
  formatTranslation: String
  id: ID!
  localCatalogue: String!
  localLabel: String
  musicDuration: Float
  numberOfTracks: Int
  packQuantity: Int
  productionDuration: Float
  status: String
  statusTranslation: String
  title: String!
  works: [ProductionDetailWork!]!
}

type ProductionDetailWork {
  discNumber: Int!
  id: ID!
  iswc: String
  title: String!
  trackNumber: Float!
  writers: [String!]!
}

type ProductionMusicMemberJoin {
  abn: String
  cdCountry: String!
  companyAddress: WriterJoinAddress
  companyName: String
  createdDate: DateTime
  fax: String
  icciKey: String
  id: Float!
  industry: Industry
  mobile: String
  nzbn: String
  personalAddress: WriterJoinAddress!
  status: ProductionMusicRegisterStatus
  telephone: String!
  title: String!
  tradingName: String
  uid: String!
  updatedDate: DateTime
  user: User
}

input ProductionMusicMemberJoinSearchInput {
  page: Int = 1
  pageSize: Int = 10
}

type ProductionMusicMemberJoinSearchOutput {
  joins: [ProductionMusicMemberJoin!]!
  total: Int!
}

enum ProductionMusicProductionType {
  Advertisements
  General
}

enum ProductionMusicRegisterStatus {
  EmailSent
  Pending
  PmcnGenerated
  Reviewed
  Synchronized
}

enum PublisherFeedbackNature {
  LeaveComment
  ReportTechnicalIssues
  ShareThoughts
}

enum PublisherPortalAccessesForAdmin {
  Financial
  Register
  Search
  TeamAdmin
  Voting
}

enum PublisherPortalAccessesForPortal {
  Financial
  Register
  Search
}

input PushOutageMessageInput {
  header: String!
  isApp: Boolean = false
  title: String!
}

type PushTokenAssociationResult {
  success: Boolean
}

type Query {
  SearchAllWorksForMobile(
    memberId: String
    performer: String
    title: String!
    writers: String
  ): SearchAllCmsWorksOutput!
  SearchWriterMemberWorks(workSearchInput: WorkSearchInputWithMemberId!): WorkSearchResult!
  adminDownloadJingleFile(jingleDownloadInput: JingleDownloadInput!): String
  adminGetAGMCandidates: GetCandidatesOutput!
  adminGetDocumentSignedUrl(
    getAGMDocumentSignedURLInput: GetAGMDocumentSignedURLInput!
  ): S3UploadResponse!
  adminGetJingleSignedUrl(getJingleSignedURLInput: GetJingleSignedURLInput!): S3UploadResponse!
  checkApiVersion(apiName: ApiNames!): ApiInfoOutput!
  checkIfEmailExist(email: String!): Boolean!
  checkIfEmailExistFromAdmin(email: String!): Boolean!
  checkIfEmailInProgressOfWriterRegisterFromAdmin(email: String!): Boolean!
  checkIfMermberPendingJoinAmcos(memberId: String!): Boolean!
  checkIfNameExistAsWriter(checkIfNameExistAsWriterInput: CheckIfNameExistAsWriterInput!): Boolean!
  checkIfUserHasAccess(email: String!): Boolean!
  checkMemberEligibility(memberIds: [String!]!): [String!]!
  confirmRemoveAccountFromAdmin(uidOrEmail: String!): UserRemoveValidationOutput!
  downloadJingleFile(jingleDownloadInput: JingleDownloadInput!): String
  downloadSongList(fileName: String!): String!
  downloadUserFile(fileName: String!, s3FileType: S3FileType!): String!
  fetchCueSheet(cueSheetSearchInput: CueSheetSearchInputWithMemberId!): CueSheetSearchResult!
  fetchCueSheetDetailPublisher(fetchCueSheetDetailInput: FetchCueSheetDetailInput!): cueSheetDetail
  # fetchCwrHistory(fetchCwrHistoryInput: FetchCwrHistoryInput!): FetchCwrHistoryOutput!
  fetchCwrSubmitters(memberId: String!): [FetchCwrSubmittersOutput!]!
  fetchElasticSearchStatus: [elasticSearchStatus!]!
  # fetchPendingCwrs(memberId: String!): [CwrRecord!]!
  fetchProductionDetailPublisher(
    fetchProductionDetailInput: FetchProductionDetailInput!
  ): ProductionDetail
  fetchWorkDetailPublisher(fetchWorkDetailInput: FetchWorkDetailInput!): workDetailForMember
  fetchWorkDetailSharers(
    fetchWorkDetailSharersInput: FetchWorkDetailSharersInput!
  ): [WorkDetailSharer!]
  firstSignin(email: String!): SignInStatuses!
  generateCmsStatementPdf(cmsStatementPdfInput: CmsStatementPdfInput!): CmsStatementPdfOutput!
  generateEligibleMemberList: String!
  generatePdfS3File(generatePdfInput: GeneratePdfInput!): String
  generateVotingReportForAllVotes(eventId: Int): String!
  getAGMCandidates: GetCandidatesOutput!
  getAGMDocumentGroup: [DocumentGroup!]!
  getAGMDocumentLink(memberId: String!, resourceName: String!): String!
  # getAdminUser: User!
  # getAdminUsers: [User!]!
  # getApplicationHistory(
  #   getApplicationHistoryInput: GetApplicationHistoryInput!
  # ): GetApplicationHistoryOutput!
  getArchiveEvents: [SotyEventWithTotalVotes!]!
  getAudiosNotSendToThirdParty(reviewJingleInput: ReviewJingleInput!): ReviewJingleOutput
  getBandListByMemberId(memberId: String!): MemberBands!
  getBusinessMapping(getBusinessMappingInputType: GetBusinessMappingInputType!): [BusinessMapping!]
  getConfigs: [Config!]!
  getCountryList: [Country!]!
  getCurrentDistributionLabel: CurrentDistributionOutput!
  getCurrentEvent: SotyEventWithTotalVotes
  getCurrentSotyEvent: GetUserSotyEventOutput
  getCwrDownloadUrl(getCwrDownloadUrlInput: GetCwrDownloadUrlInput!): String!
  getCwrUploadUrl(getCwrUploadUrlInput: GetCwrUploadUrlInput!): String!
  getDistributionDetails(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsAllWorks(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsAllWorksResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): ZippedOutput
  getDistributionDetailsFilmTv(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsFilmTvResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): StringBatchOutput
  getDistributionDetailsResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): DistributionDetailsOutput
  getDistributionDetailsSummary(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsSummaryResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): DistributionDetailsSummaryOutput
  getDistributionDetailsTopAudioVisual(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsTopAudioVisualResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionDetailsTopAudioVisualOutput!]
  getDistributionDetailsTopWorksAndCategory(
    cacheKey: String!
    distributionDate: String
    distributionLabel: String!
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    webSocketId: String!
  ): Boolean
  getDistributionDetailsTopWorksAndCategoryResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): DistributionDetailsTopWorksAndCategoryOutput
  getDistributionHistoryWithSharer(
    cacheKey: String!
    from: String
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    to: String
    webSocketId: String!
  ): Boolean
  getDistributionHistoryWithSharerByArray(inputs: DistributionHistoryInputTypeArray!): Boolean
  getDistributionHistoryWithSharerByArrayResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionHistoryOutputArray!]
  getDistributionHistoryWithSharerResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionHistoryOutput!]
  getDistributionNotes(
    getDistributionNotesInput: GetDistributionNotesInput!
  ): GetDistributionNotesOutput!
  getDistributionNotesDetails(
    getDistributionNotesDetailsInput: GetDistributionNotesDetailsInput!
  ): GetDistributionNotesDetailsOutput!
  getElasticSearchPresetConnector: elasticSearchConnector!
  getFinancialDashboardData(financialDashboardDataInput: FinancialDashboardDataInput!): Boolean
  getFinancialDashboardDataResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [FinancialDashboardDataOutput!]
  getGlobalDistribution(
    cacheKey: String!
    from: String
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    to: String
    webSocketId: String!
  ): Boolean
  getGlobalDistributionResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionHistoryOutput!]
  getJingleById(jingleId: Float!): Jingle
  getJingleSignedUrl(getJingleSignedURLInput: GetJingleSignedURLInput!): S3UploadResponse!
  getLandingPagePDF(landingPagePDFInput: LandingPagePDFInputType!): Boolean
  # getMemberById(memberId: String!): Member
  getMemberDetails(memberId: String!): MemberDetails!
  getMemberDetailsLambda(memberId: String): GetMemberDetailResult!
  getMemberListExcelDownloadUrl: String!
  getMemberNameById(memberId: String!): String
  getOutageBannerConfig(isApp: Boolean!): String!
  getPaymentSummaryPDF(paymentSummaryPDFInput: PaymentSummaryPDFInput!): String
  # getProductionMusicMemberJoinById(id: String!): ProductionMusicMemberJoin
  getProductionMusicQuote: GetQuoteOutput!
  getPublisherDocumentGroup(memberId: String!): [DocumentGroup!]!
  getPublisherDocumentLink(memberId: String!, resourceName: String!): String!
  # getPublisherFeedback(
  #   getPublisherFeedbackInput: GetPublisherFeedbackInput!
  # ): GetPublisherFeedbackOutput!
  getPublisherNewsDetail(id: String!, memberId: String!): News
  getPublisherPortalLatestNews(
    getPublisherPortalNewsInput: GetPublisherPortalNewsInput!
  ): GetPublisherPortalNewsOutput!
  getPublisherPortalNews(
    getPublisherPortalNewsInput: GetPublisherPortalNewsInput!
  ): GetPublisherPortalNewsOutput!
  getRemittanceAdvicePDF(remittancePaymentPDFInput: RemittancePaymentPDFInput!): Boolean
  getReportOverviewPagePDF(reportOverviewPagePDFInput: ReportOverviewPagePDFInputType!): Boolean
  getRoyaltyStatement(royaltyStatementInput: RoyaltyStatementInput!): Boolean
  getSotyMemberVote(memberId: String!): SotyMemberVote
  getSotySongs(getSotySongsInput: GetSotySongsInput!): GetSotySongsOutput!
  getTaxInvoicePDF(invoicePaymentPDFInput: InvoicePaymentPDFInput!): Boolean
  getTopVotedSongsForCurrentEvent: TopVotedSongsOutput!
  # getUser: User!
  # getUserByEmail(email: String!): User
  # getUserByUidFromAdmin(uid: String!): User
  getVoteTickets(memberId: String!): [VoteTicket!]!
  getWorkDetailAndAudiosByWorkId(getWorkDetailAndAudiosInput: GetWorkDetailAndAudiosInput!): Winf
  getWorkEarningDistributionSummary(
    cacheKey: String!
    from: String
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    to: String
    webSocketId: String!
  ): Boolean
  getWorkEarningDistributionSummaryByArray(inputs: DistributionHistoryInputTypeArray!): Boolean
  getWorkEarningDistributionSummaryByArrayResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionHistoryOutputArray!]
  getWorkEarningDistributionSummaryResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [WorkEarningDistributionSummaryOutput!]
  getWorkEarningWithCategory(
    cacheKey: String!
    from: String
    memberCategory: MemberCategories
    memberId: String!
    sharerCategory: SharerCategory
    to: String
    webSocketId: String!
  ): Boolean
  getWorkEarningWithCategoryByArray(inputs: CategoryChartDataInputTypeArray!): Boolean
  getWorkEarningWithCategoryByArrayResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): CategoryChartDataOutputArray
  getWorkEarningWithCategoryResult(
    cacheKey: String!
    memberId: String!
    skip: Float
    take: Float
  ): [DistributionHistoryOutput!]
  # getWriterFormDetails: WriterMemberJoin!
  # getWriterRegisterApplicationForm(uid: String!): User!
  # isApplicationConfirmed(key: String!): Boolean!
  # listElasticSearchSources: [elasticsearchSource!]!
  # rightholderNameAutoCompletion(
  #   rightholderNameAutoCompletionInput: RightholderNameAutoCompletionInputWithMemberId!
  # ): [String!]!
  # saveCommentFromAdmin(comment: String!, isAmcosComment: Boolean!, uid: String!): [AdminComment!]!
  # searchCoWritersForMobile(searchCmsCoWritersInput: SearchCmsCoWritersInput!): CoWritersOutput!
  # searchConfirmApplications(
  #   paginationSearchInput: PaginationSearchInput!
  # ): ConfirmApplicationSearchOutput!
  # searchMembersWithCwr(
  #   memberSearchWithPaginationInput: MemberSearchWithPaginationInput!
  # ): MemberSearchWithPaginationOutput!
  # searchMembersWithUsers(
  #   memberSearchWithPaginationInput: MemberSearchWithPaginationInput!
  # ): MemberSearchWithPaginationOutput
  # searchMyWorksForMobile(memberId: String): SearchCmsWorksOutput!
  # searchProductionMusicMemberJoins(
  #   productionMusicMemberJoinSearchInput: ProductionMusicMemberJoinSearchInput!
  # ): ProductionMusicMemberJoinSearchOutput!
  # searchUsersWithPagination(
  #   userSearchWithPaginationInput: UserSearchWithPaginationInput!
  # ): UserSearchWithPaginationOutput
  # searchWorkById(workId: String!): Winf
  # searchWorkProductionMusic(
  #   workSearchInput: WorkSearchInputForProductionMusic!
  # ): WorkSearchResultForProductionMusic!
  # searchWorkPublic(workSearchInput: WorkSearchInput!): WorkSearchResult!
  # searchWorkPublisher(workSearchInput: WorkSearchInputWithMemberId!): WorkSearchResult!
  # searchWorkWriter(workSearchInput: WorkSearchInputWithMemberId!): WorkSearchResult!
  searchWorksWithPagination(
    jingleAdminSearchWorkInput: JingleAdminSearchWorkInput!
  ): JingleAdminSearchWorkOutput
  # searchWriterApplicationsWithPagination(
  #   writerApplicationSearchInput: WriterApplicationSearchInput!
  # ): WriterApplicationSearchOutput
  uploadCandidateAvatar(fileName: String!): S3UploadResponse!
  uploadEnquiryAttachment(fileName: String!, memberId: String!): S3UploadResponse!
  uploadNewsImage(fileName: String!): S3UploadResponse!
  uploadSongList(fileName: String!): S3UploadResponse!
  uploadTemplateImage(fileName: String!): S3UploadResponse!
  venueLocationSearch(page: Int = 1, pageSize: Int = 10, query: String!): [VenueLocation!]!
  verifyAbn(abnInput: String!): VerifyAbnOutput!
  viewActiveClaims(memberId: String): ActiveClaimsOutput!
  viewActiveSubmissions(memberId: String): [ClaimsSummary!]!
  viewApraRoyaltyStementsList(memberId: String): ViewCmsRoyaltyStatementsListOutput!
  viewClaimDetail(viewClaimDetailInput: ViewClaimDetailInput!): ClaimDetail!
  viewProcessedClaims(viewProcessedClaimsInput: ViewProcessedClaimsInput!): [ClaimsSummary!]!
  viewSetLists(memberId: String): [ViewSetListsOutput!]!
  viewWorkDetailForMobile(viewCmsWorkDetailInput: ViewCmsWorkDetailInput!): ViewCmsWorkDetailOutput!
}

"""
Rcsb
"""
type Rcsb {
  cdCountry: String
  cdStatus: String
  dtBatch: DateTime!
  iccd: Iccd
  icci: Icci
  origIcci: Icci
  origIcciKey: String
  pmsdList: [Pmsd!]
  rcsbKey: String!
  totalPrice: Float
}

input RcsbInput {
  cdCountry: String!
  comment: String
  dtTransferred: DateTime!
  isApplyForSelf: Boolean!
  pmsdInputs: [PmsdInput!]!
}

enum Region {
  ACT
  INT
  NSW
  NT
  NZ
  QLD
  SA
  TAS
  VIC
  WA
}

input RegisterWorkInput {
  alternateTitle: String
  category: WorkCategory = GW
  client: String
  contributionDetails: [ContributionDetail!]
  duration: Int = 0
  ipiNumber: String
  isArrangement: Boolean = false
  isLoginFromApp: Boolean = true
  isrc: [String!]
  jingleUploadInputs: [S3UploadInput!]
  memberId: String
  originalComposer: String
  originalTitle: String
  performer: String
  product: String
  productDescription: String
  title: String!
  workId: String
}

"""
RegisterWorkResult
"""
type RegisterWorkResult {
  jingleResponse: SubmitJingleResponse
  workId: String!
}

input RemittancePaymentPDFInput {
  distributionCountry: DistributionCountry!
  documentType: PaymentsDocTypes!
  memberId: String!
  messageId: String!
  statementYearMonth: String!
  utcOffset: Float
  webSocketId: String!
}

input RemoveSetListInput {
  isLoginFromApp: Boolean = true
  memberId: String
  setlistId: Float!
}

input ReportOverviewPagePDFInputType {
  distributionCurrency: String!
  distributionDate: String!
  distributionLabel: String!
  distributionTerritory: String!
  fileName: String!
  fullName: String!
  ipiNumber: String!
  memberId: String!
  messageId: String!
  pdfComponentName: PDFComponentName!
  pdfOptions: JSONObject
  sharerCategory: SharerCategory
  totalNetAmount: Float!
  utcOffset: Float
  webSocketId: String!
}

input ResetVoteInput {
  memberIds: [String!]!
}

input ReviewJingleInput {
  onlyExcludedAudios: Boolean!
  order: String!
  orderBy: String!
  page: Float!
  rowsPerPage: Float!
}

type ReviewJingleOutput {
  audios: [SimpleReviewJingle!]!
  count: Float!
}

enum RightType {
  Mechanical
  Performing
  Print
  Syncronisation
}

input RightholderInWorkSearch {
  """
  Is term is true when auto complete result is picked
  """
  isMatchingTerm: Boolean = false

  """
  keyword / key term for right holder
  """
  nameKeyword: String!
}

input RightholderNameAutoCompletionInputWithMemberId {
  """
  right holder name keywords
  """
  keywords: String!

  """
  Member ID for validateMember decorator
  """
  memberId: String!

  """
  right holder type, publisher, writer or performer
  """
  rightholderType: RightholderNameAutoCompletionType
}

enum RightholderNameAutoCompletionType {
  performer
  publisher
  writer
}

enum Role {
  Admin
  Owner
  SuperAdmin
  User
}

enum RoyaltiesDocTypes {
  RoyaltiesStatement
}

input RoyaltyStatementInput {
  distributionCountry: DistributionCountry!
  documentType: RoyaltiesDocTypes!
  memberId: String!
  messageId: String!
  outputDocumentType: OutputDocTypes = EXCEL
  statementYearMonth: String!
  utcOffset: Float
  webSocketId: String!
}

input S3DownloadInputWithOriginalFileName {
  bucketName: String
  fileName: String!
  originalFileName: String!
}

type S3File {
  bucketName: String
  contentLength: Float
  contentType: ContentTypes
  fileName: String!
  originalName: String!
}

enum S3FileType {
  AGMDocumentTempFile
  CwrFile
  CwrMemberListExcel
  EarningInsightsPdf
  FinancialDoc
  JingleTempFile
  PublicImage
  PublisherEnquiry
  WriterReportPdf
}

input S3UploadInput {
  contentType: ContentTypes
  formattedName: String!
  originalName: String!
}

type S3UploadResponse {
  bucketName: String
  contentLength: Float
  contentType: ContentTypes
  fileName: String!
  formattedName: String!
  originalName: String!
  url: String!
}

input SaveAgmCandidateInput {
  avatarImagePath: String!
  candidateBiography: String!
  cdCompany: String!
  electionStatement: String!
  hyperlinkTitle: String
  hyperlinkUrl: String
  memberId: String!
  year: Float!
}

input SaveCwrRecordInput {
  fileFullName: String!
  fileType: String!
  status: CwrStatus!
}

input SaveUserFirstNameAndLastNameInput {
  firstName: String!
  lastName: String!
}

input SaveUserMemberAccessesInput {
  memberAccesses: [NewMemberAccess!]!
  uidOrEmail: String!
}

type SearchAllCmsWorksOutput {
  overSized: Boolean
  totalRecords: Float
  works: [CmsSearchAllWork!]
}

input SearchCmsCoWritersInput {
  ipiNumber: String
  memberId: String
}

type SearchCmsWorksOutput {
  totalRecords: Float
  works: [CmsSearchWork!]
}

input SearchWorkSort {
  """
  aes/desc
  """
  order: String = "asc"

  """
  sort by different factors
  """
  sortBy: WorkSearchSortBy = TITLE
}

type SetListTrack {
  duration: Float!
  title: String
  workId: String
  writers: String
}

enum SharerCategory {
  All
  AllPublisher
  OriginalPublisher
  SubPublisher
  SubstitutedPublisher
}

enum SignInStatuses {
  EXIST
  MEMBER_DECEASED
  MORE_THAN_ONE
  NOT_EXIST
  SENT
  USER_WITH_NO_ACCESS
}

type SimpleCountry {
  countryCode: String!
  name: String!
}

input SimpleCountryInput {
  countryCode: String!
  name: String!
}

type SimpleJingleWork {
  numberOfAudios: Float!
  workId: String!
  workTitle: String!
}

type SimpleReviewJingle {
  bmatStatus: JingleFileStatus!
  createdDate: DateTime!
  fileName: String!
  jingleId: Float!
  soundmouseStatus: JingleFileStatus!
  workId: String!
  workTitle: String!
}

type SingleGenre {
  genre: Genre!
  status: Boolean!
}

input SingleGenreInput {
  genre: Genre!
  status: Boolean!
}

type SotyEvent {
  createdByUid: String
  fromDate: DateTime!
  id: Float!
  memberVotes: [SotyMemberVote!]
  songListDisplayName: String!
  songListUrl: String!
  sotyTemplate: SotyTemplate!
  status: SotyEventStatus!
  toDate: DateTime!
  updatedByUid: String
}

input SotyEventInput {
  fromDate: DateTime!
  id: Float
  songListDisplayName: String!
  songListUrl: String!
  templateInput: SotyTemplateInput!
  toDate: DateTime!
}

enum SotyEventStatus {
  Active
  Archived
  Inactive
}

type SotyEventWithTotalVotes {
  sotyEvent: SotyEvent!
  totalVotes: Float!
}

type SotyMemberVote {
  createdDate: DateTime!
  eventId: Float!
  freeTextArtist: String
  freeTextTitle: String
  id: Float!
  memberId: String!
  song: SotySong
  songId: Float
  sotyEvent: SotyEvent
  updatedDate: DateTime!
  userId: String!
  userName: String!
}

type SotySong {
  artist: String!
  eventId: Float!
  id: Float!
  sotyTemplate: SotyEvent
  thumbnail: String
  title: String!
  url: String
  winfKey: String!
  writers: String
}

type SotyTemplate {
  heroImageDisplayName: String!
  heroImageUrl: String!
  mainText: String!
  prizeDescription: String
  prizeImageDisplayName: String!
  prizeImageUrl: String!
  prizeTitle: String
  songEligibilityText: String!
  termsAndConditionsUrl: String!
}

input SotyTemplateInput {
  heroImageDisplayName: String!
  heroImageUrl: String!
  mainText: String!
  prizeDescription: String
  prizeImageDisplayName: String!
  prizeImageUrl: String!
  prizeTitle: String
  songEligibilityText: String!
  termsAndConditionsUrl: String!
}

enum StPortalAccessesForAdmin {
  ClaimAndRegister
  Financial
  Primary
}

enum StPortalAccessesForPortal {
  Financial
}

enum StatementPdfTypes {
  BCTI
  RCTI
  WriterInvoice
  WriterRemittanceAdvice
  WriterRoyaltyStatement
}

type StringBatchOutput {
  data: String!
  skipped: Float!
  taken: Float!
  total: Float!
}

enum SubAccess {
  CatalogueTransfer_CatalogueTransfer
  CatalogueTransfer_TransferHistory
}

type SubAccessOrphanedType {
  catalogueTransferSubAccess: CatalogueTransferSubAccess!
  portalAccessesForAdmin: PortalAccessesForAdmin!
  portalAccessesForPortal: PortalAccessesForPortal!
}

type SubmitJingleResponse {
  failedS3Files: [S3File!]
  status: JingleSaveStatus!
}

enum SubscriptionFunctionName {
  EI_DISTRIBUTION_GLOBAL_OVERVIEW
  EI_DISTRIBUTION_HISTORY_WITH_SHARER_BY_ARRAY
  EI_DISTRIBUTION_REPORT_ALL_WORKS
  EI_DISTRIBUTION_REPORT_DETAILS
  EI_DISTRIBUTION_REPORT_FILM_TV
  EI_DISTRIBUTION_REPORT_HISTORY_SHARER
  EI_DISTRIBUTION_REPORT_SUMMARY
  EI_DISTRIBUTION_REPORT_TOP_AUDIO_VISUAL
  EI_DISTRIBUTION_REPORT_TOP_WORK_CATEGORY
  EI_DISTRIBUTION_REPORT_WORK_EARNING_CATEGORY
  EI_DISTRIBUTION_REPORT_WORK_EARNING_SUMMARY
  EI_DISTRIBUTION_SUMMARY_BY_ARRAY
  EI_DISTRIBUTION_WITH_CATEGORY_BY_ARRAY
  EI_PDF
  FINANCIAL_DASHBOARD
  FINANCIAL_PDF_EXCEL
  PORTAL_OUTAGE
  SHUTDOWN
  WRITER_APP_OUTAGE
}

input SuperAdminSetUserAsPrimaryWriterInput {
  confirm: Boolean!
  memberKey: String!
  userEmail: String!
}

enum Territory {
  Australasia
  Worldwide
}

type TerritoryCode {
  code: String!
  simpleName: String!
  sortOrder: Float!
  translation: String!
}

enum Title {
  DR
  MISS
  MR
  MRS
  MS
}

enum TitleInputType {
  Contained
  Exact
  StartWith
}

type TopVotedSong {
  artist: String!
  rank: Float!
  title: String!
  total: Int!
  writers: String
}

type TopVotedSongsOutput {
  songs: [TopVotedSong!]!
  total: Int!
}

input UpdateAdminInput {
  accesses: [Access!]!
  firstName: String
  lastName: String
  role: Role!
  subAccesses: [SubAccess!]!
  uid: String!
}

input UpdateClaimInput {
  distributionId: String!
  isLoginFromApp: Boolean = true
  memberId: String!
  performanceDate: [String!]!
  performanceType: PerformanceTypes!
  performedWorksDetail: [PerformedWorkDetail!]!
  performerName: String!
  submissionId: String!
  venueDetail: VenueDetail!
}

"""
UpdateClaimOutput
"""
type UpdateClaimOutput {
  success: Boolean!
}

input UpdateMemberCwrAccessInput {
  ccs: [String!]
  codes: [String!]
  emails: [String!]
  id: Int!
  sftpFolderName: String
}

enum UpdateMemberDetailActions {
  MemberAddress
  MemberBank
  MemberPersonalDetail
}

input UpdateMemberDetailsInput {
  action: UpdateMemberDetailActions!
  address: [MemberAddressDetailsUpdate!]
  auditRecords: [AuditRecord!]
  bankDetail: MemberBankDetailsUpdate
  memberId: String!
  personalDetails: MemberPersonalDetailsUpdate
}

input UpdateProductionMusicMemberJoinInput {
  icciKey: String
  id: Float!
  status: ProductionMusicRegisterStatus!
}

input UpdatePublisherPortalNewsInput {
  id: String!
  imagePath: String!
  linkUrl: String
  newsDetail: String
  publishDate: DateTime!
  title: String!
}

input UpdateSetListInput {
  isLoginFromApp: Boolean = true
  memberId: String
  setlistId: Float!
  title: String
  tracks: [CreateSetListTrack!]
}

type UpdateStepResponse {
  currentStep: JoinStepIdentifier!
  outOfSynced: Boolean!
  timestamp: String!
}

input UpdateWorkDetailsInput {
  alternateTitles: [String!]
  duration: Int
  ipiNumber: String
  isrcs: [String!]
  memberId: String
  workId: String!
}

enum UploadedFrom {
  PORTAL
  SFTP_CLIENT
}

type User {
  access: [Access!]!
  createdDate: DateTime
  deletedDate: DateTime
  email: String!
  emailModifiedDate: DateTime
  firstName: String
  fullName: String!
  idmSetupDate: DateTime
  isDeleted: Boolean!
  isIdmSetup: Boolean!
  lastActiveDate: DateTime
  lastName: String
  productionMusicMemberJoin: ProductionMusicMemberJoin
  publisherFeedback: [Feedback!]
  role: Role!
  status: UserStatuses!
  subAccess: [SubAccess!]!
  uid: String!
  updatedDate: DateTime
  userMemberAccesses: [UserMemberAccess!]
  userProductionMusicAccesses: [UserProductionMusicAccess!]
  writerAgreedSubmissionTCDate: DateTime
  writerMemberJoin: WriterMemberJoin
  writerMemberJoinAmcos: WriterMemberJoinAmcos
}

enum UserDeleteValidationCode {
  ERROR_INCLUDES_PUBLISHER_FEEDBACK
  ERROR_INVALID_USER
  PASS
}

type UserFile {
  bucketName: String!
  createdDate: DateTime!
  fileName: String!
  fileSize: Float!
  fileType: String!
  isDeleted: Boolean!
  jingle: Jingle
  originalName: String!
  updatedDate: DateTime
}

"""
Portal relation mappings
"""
type UserMemberAccess {
  auditModifiedDate: DateTime
  createdDate: DateTime
  member: Member
  memberId: String!
  parentMemberIds: [String!]
  portalAccesses: [PortalAccesses!]!
  status: MemberAccessStatuses!
  uid: String!
  updatedDate: DateTime
  user: User
}

"""
Production music relation mappings
"""
type UserProductionMusicAccess {
  createdDate: DateTime
  icciKey: String!
  productionMusicMember: Icci
  status: MemberAccessStatuses!
  uid: String!
  updatedDate: DateTime
  user: User
}

type UserRemoveValidationOutput {
  code: UserDeleteValidationCode!
  hasPassedValidation: Boolean!
  message: String!
}

input UserSearchWithPaginationInput {
  order: String = "ASC"
  orderBy: String = "userName"
  page: Int = 0
  rowsPerPage: Int = 10
  searchString: String!
}

type UserSearchWithPaginationOutput {
  count: Int!
  users: [User!]!
}

enum UserStatuses {
  Active
  Inactive
  Pending
}

input VenueDetail {
  accountNumber: String
  addressLine1: String!
  country: CountryOfPerformance!
  locationId: String
  name: String!
  postcode: String
  state: String
  suburb: String!
  uniquifier: String
}

type VenueLocation {
  accountId: String
  accountNumber: String
  addressLine1: String
  addressLine2: String
  addressLine3: String
  city: String
  country: String
  locationId: String!
  name: String!
  placeId: String
  postcode: String
  state: String
}

type VerifyAbnOutput {
  Abn: String
  AbnStatus: String
  Acn: String
  AddressDate: String
  AddressPostcode: String
  AddressState: String
  BusinessName: [String!]
  EntityName: String
  EntityTypeCode: String
  EntityTypeName: String
  Gst: String
  Message: String
}

input ViewClaimDetailInput {
  distributionId: String!
  memberId: String
  submissionId: String!
}

type ViewCmsRoyaltyStatementsListOutput {
  royaltyDistributions: [CmsRoyaltyDistribution!]
}

input ViewCmsWorkDetailInput {
  ipiNumber: String
  memberId: String
  workId: String!
}

type ViewCmsWorkDetailOutput {
  alternativeTitles: [String!]
  dispute: Boolean!
  duration: Float!
  isrc: [String!]
  isrcList: [CmsWorkIsrc!]
  iswc: String
  jingleList: [S3File!]
  newRegistration: Boolean!
  performers: [String!]
  registered: Boolean!
  shares: [CmsWorkDetailShareDetail!]
  title: String!
  unprocessed: Boolean!
  workId: String!
  writers: String!
}

input ViewProcessedClaimsInput {
  dateBegin: DateTime!
  dateEnd: DateTime!
  memberId: String
}

type ViewSetListsOutput {
  createdAt: String!
  name: String
  numberOfTracks: Float!
  setlistId: Float!
  tracks: [SetListTrack!]!
}

type VoteInfo {
  companyType: CompanyType!
  isVote: Boolean!
  voteNumber: Float!
  voteStatus: Boolean
  voteType: AGMVoteType!
  votesPrimary: Float
}

type VoteTicket {
  candidate: CombinedAgmCandidate
  candidateMemberId: String!
  cdCompany: String!
  createdDate: DateTime!
  memberId: String!
  noVotes: Float!
  updatedDate: DateTime
  year: Float!
}

type Waka {
  wakaName: String
}

type Winf {
  jingles: [Jingle!]
  title: String
  wakas: [Waka!]
  winfkey: String
  writers: String
}

"""
The work type
"""
enum WorkCategory {
  """
  Background
  """
  BG

  """
  General
  """
  GW

  """
  Jingles
  """
  JG

  """
  Non Copyright
  """
  NC

  """
  Overseas Unknown Performance
  """
  OC

  """
  Production Music
  """
  PM

  """
  Royalty Exempt
  """
  RE

  """
  Unidentified Works
  """
  UD
}

type WorkDetailSharer {
  cdCategory: CdCategory
  cdSynch: String
  contract: String
  dateEffective: DateTime
  id: String!
  ipNameNumber: String
  name: String!
  percentageMech: Float!
  percentagePerf: Float
  percentageSynch: Float
  society: String
  societyMech: String
  societySynch: String
  territory: workTerritory!
  usSocyRepresent: String
}

type WorkEarningDistributionSummaryOutput {
  client: String
  dataBatchId: String
  dataBatchLineNumber: String
  dataBatchPeriodEnd: DateTime
  dataBatchPeriodStart: DateTime
  digitalServiceProvider: String
  directPayeeInternational: Boolean
  distributionCategory: String
  distributionCategoryDetails: String
  distributionCountry: String
  distributionCurrency: String
  distributionDate: String
  distributionLabel: String
  distributionSociety: String
  distributionSource: String
  distributionSourceCode: String
  distributionTerritory: String!
  distributionType: String
  exploitationTerritoryCode: String
  exploitationTerritoryName: String
  exploitationTime: DateTime
  grossRoyaltyAmount: String
  isrc: String
  iswc: String
  memberFirstNames: String
  memberId: String
  memberSurname: String
  netRoyaltyAmount: String
  originalDistributionLabel: String
  performanceCount: String
  performanceDetails: String
  productionCategory: String
  productionId: String
  productionPerformers: String
  productionTitle: String
  programmeEpisodeNo: String
  programmeId: String
  programmeSeasonNo: String
  programmeSubTitle: String
  programmeTitle: String
  programmeType: String
  reportedPeriodEnd: DateTime
  reportedPeriodStart: DateTime
  reportedSharePercent: String
  reportingCurrency: String
  reportingSociety: String
  reportingSocietyCountry: String
  rightHolderId: String
  rightHolderName: String
  rightType: String
  royaltyBasePrice: String
  sharePercentage: String
  sharerCategory: String
  source: String
  totalNetAmount: Float!
  totalWorks: Float
  transactionType: String
  workCategory: String
  workId: String
  workTitle: String
  writers: String
}

enum WorkMusicArrangement {
  ADM
  AR
  ARR
  ATT
  LIB
  NEW
  ORI
  UNS
  Unknown
}

enum WorkPlayType {
  Instrumental
  Mixed
  Vocal
  unknown
}

enum WorkRegistrationType {
  Both
  Mechanical
  Performing
}

input WorkSearchInput {
  categories: [WorkCategory!]

  """
  filter
  """
  filter: [WorkStatuses!]

  """
  IPI
  """
  ipi: String
  isMechanicalDispute: Boolean
  isMechanicalDivisionOfFee: Boolean
  isPerformingDispute: Boolean
  isPerformingDivisionOfFee: Boolean
  isRegistered: Boolean

  """
  ISWC
  """
  iswc: String
  lastPaid: Boolean
  lastPerformed: Boolean
  origin: WorkSearchOrigin
  performer: RightholderInWorkSearch
  publisher: RightholderInWorkSearch

  """
  pagination skip
  """
  skip: Float = 0

  """
  sort
  """
  sort: SearchWorkSort

  """
  pagination count
  """
  take: Float = 12

  """
  search term
  """
  title: String

  """
  how does the keywords match? contains? exact? or start with
  """
  titleInputType: TitleInputType

  """
  winfkey
  """
  winfkey: String
  writer: RightholderInWorkSearch
}

input WorkSearchInputForProductionMusic {
  """
  Icci Key for validateProductionMusicMember decorator
  """
  icciKey: String!

  """
  pagination skip
  """
  skip: Float = 0

  """
  pagination count
  """
  take: Float = 12
  title: String
  writer: RightholderInWorkSearch
}

input WorkSearchInputWithMemberId {
  categories: [WorkCategory!]

  """
  filter
  """
  filter: [WorkStatuses!]

  """
  IPI
  """
  ipi: String
  isMechanicalDispute: Boolean
  isMechanicalDivisionOfFee: Boolean
  isPerformingDispute: Boolean
  isPerformingDivisionOfFee: Boolean
  isRegistered: Boolean

  """
  ISWC
  """
  iswc: String
  lastPaid: Boolean
  lastPerformed: Boolean

  """
  Member ID for validateMember decorator
  """
  memberId: String!
  origin: WorkSearchOrigin
  performer: RightholderInWorkSearch
  publisher: RightholderInWorkSearch

  """
  pagination skip
  """
  skip: Float = 0

  """
  sort
  """
  sort: SearchWorkSort

  """
  pagination count
  """
  take: Float = 12

  """
  search term
  """
  title: String

  """
  how does the keywords match? contains? exact? or start with
  """
  titleInputType: TitleInputType

  """
  winfkey
  """
  winfkey: String
  writer: RightholderInWorkSearch
}

enum WorkSearchOrigin {
  ALL_WORKS
  LOCAL
}

type WorkSearchResult {
  total: Float!
  works: [workSearch!]!
}

type WorkSearchResultForProductionMusic {
  total: Float!
  works: [workSearchWithSimple!]!
}

enum WorkSearchSortBy {
  CREATED_DATE
  OPUS_STATUS
  TITLE
  WORK_ID
  WORK_STATUS
  WRITERS
}

enum WorkStatuses {
  ADDITIONAL_REGISTRATION
  IN_DISPUTE
  REGISTERED
  REGISTRATION_RECEIVED
  UNREGISTERED
}

enum WorkStyle {
  Jazz
  Popular
  Serious
  Unclassified
}

enum WorkVersion {
  Arrangement
  CompositeOfSamples
  Excerpt
  Medley
  Modified
  Movement
  Original
  Potpourri
  Remix
  Translation
  Unknown
  UnspecifiedComposite
}

input WriterApplicationSearchInput {
  order: String = "ASC"
  orderBy: String = "userName"
  page: Int = 1
  rowsPerPage: Int = 15
  searchString: String!
}

type WriterApplicationSearchOutput {
  count: Int!
  users: [User!]!
}

type WriterJoinAddress {
  addressLine1: String!
  country: SimpleCountry!
  postCode: String!
  state: String!
  suburb: String!
}

type WriterJoinAddressDetails {
  hasMailingAddress: Boolean
  mailingAddress: WriterJoinAddress
  residentialAddress: WriterJoinAddress!
  sameAsMailingAddress: Boolean
}

input WriterJoinAddressDetailsInput {
  hasMailingAddress: Boolean = false
  mailingAddress: WriterJoinAddressInput
  residentialAddress: WriterJoinAddressInput!
  sameAsMailingAddress: Boolean = true
}

input WriterJoinAddressInput {
  addressLine1: String!
  country: SimpleCountryInput!
  postCode: String!
  state: String!
  suburb: String!
}

type WriterJoinBankDetails {
  accountName: String!
  accountNumber: String!
  bankAddressLine1: String
  bankAddressLine2: String
  bankCountry: SimpleCountry!
  bankName: String!
  bsb: String
  currency: Currency
  iban: String
  routeNo: String
  swiftCode: String
}

input WriterJoinBankDetailsInput {
  accountName: String!
  accountNumber: String!
  bankAddressLine1: String
  bankAddressLine2: String
  bankCountryCode: String!
  bankName: String!
  bsb: String
  currency: Currency
  iban: String
  routeNo: String
  swiftCode: String
}

type WriterJoinBusinessDetails {
  businessNumber: String
  taxCountry: SimpleCountry!
}

input WriterJoinBusinessDetailsInput {
  businessNumber: String
  taxCountryCode: String!
}

type WriterJoinContactDetails {
  homePhone: String
  primaryPhone: String!
  workPhone: String
}

input WriterJoinContactDetailsInput {
  homePhone: String
  primaryPhone: String!
  workPhone: String
}

input WriterJoinEligibilityInput {
  eligibility: [EligibilityOptions!]!
  joinApraOnly: Boolean!
}

type WriterJoinGenreDetails {
  genres: [SingleGenre!]!
}

input WriterJoinGenreDetailsInput {
  genres: [SingleGenreInput!]!
}

type WriterJoinParentConsent {
  address: String!
  email: String!
  fullLegalName: String!
  givePermission: Boolean
  phoneNumber: String!
  signature: String!
}

input WriterJoinParentConsentInput {
  address: String!
  email: String!
  fullLegalName: String!
  givePermission: Boolean = false
  phoneNumber: String!
  signature: String!
}

type WriterJoinPerformerDetails {
  bands: [String!]
  pseudonyms: [String!]
}

input WriterJoinPerformerDetailsInput {
  bands: [String!]
  pseudonyms: [String!]
}

type WriterJoinPersonalDetails {
  dateOfBirth: String!
  ethnicity: Ethnicity
  firstName: String!
  gender: Gender!
  lastName: String!
  middleName: [String!]
  nationality: SimpleCountry!
  title: Title
}

input WriterJoinPersonalDetailsInput {
  countryCode: String!
  dateOfBirth: String!
  ethnicity: Ethnicity
  firstName: String!
  gender: Gender!
  lastName: String!
  middleName: [String!]
  title: Title
}

type WriterMemberJoin {
  addressDetails: WriterJoinAddressDetails
  adminComments: [AdminComment!]
  bankDetails: WriterJoinBankDetails
  businessDetails: WriterJoinBusinessDetails
  cmsSentFlag: Boolean!
  contactDetails: WriterJoinContactDetails
  createdDate: DateTime!
  currentStep: JoinStepIdentifier!
  eligibility: [EligibilityOptions!]
  formProgress: [FormProgress!]!
  genreDetails: WriterJoinGenreDetails
  joinApraOnly: Boolean
  memberId: String
  parentConsent: WriterJoinParentConsent
  payload: String
  performerDetails: WriterJoinPerformerDetails
  personalDetails: WriterJoinPersonalDetails
  region: Region
  signature: String
  submittedDate: DateTime
  territory: Territory
  uid: String!
  updatedDate: DateTime!
  user: User!
}

type WriterMemberJoinAmcos {
  adminComments: [AdminComment!]
  eligibility: [EligibilityOptions!]
  memberId: String!
  musicUsage: String
  region: Region
  signature: String
  submittedDate: DateTime
  territory: Territory
  uid: String!
  updatedDate: DateTime!
  user: User!
}

input WriterMemberJoinAmcosInput {
  eligibility: [EligibilityOptions!]!
  memberId: String!
  musicUsage: String
  region: Region!
  signature: String!
  territory: Territory!
}

enum WriterPortalAccessesForAdmin {
  ClaimAndRegister
  Financial
  Primary
}

enum WriterPortalAccessesForPortal {
  ClaimAndRegister
  Financial
}

type ZippedOutput {
  zippedData: String!
}

type cueSheetDetail {
  alternativeTitles: [String!]!
  country: String
  currentTx: DateTime
  distributionCreated: String
  durations: cueSheetDurations!
  episode: String
  genre: String
  id: String!
  lastBroadcast: String
  originalTx: DateTime
  productionDate: DateTime
  productionNumber: String
  productionYear: Float!
  series: String
  seriesId: String
  station: String
  subTitle: String
  title: String!
  works: [cueSheetDetailWork!]!
}

type cueSheetDetailWork {
  durations: workCueSheetDurations!
  id: String!
  isCommissioned: Boolean!
  playType: WorkPlayType
  title: String!
  writers: [String!]!
}

type cueSheetDurations {
  localMusic: Float!
  music: Float!
  program: Float!
}

type cueSheetSearch {
  akas: [String!]!
  category: CueSheetCategory!
  cuepkey: String!
  episodeNumber: String
  seriesNumber: String
  subtitle: String
  title: String!
  year: Int!
}

type elasticSearchConnector {
  name: String!
  state: String
}

type elasticSearchStatus {
  alias: String
  docsCount: Float!
  docsDeleted: Float!
  health: String!
  index: String!
  migrationCreatedDate: DateTime
  migrationError: String
  migrationId: String
  migrationName: String
  migrationStatus: String
  migrationTargets: Float
  migrationUpdatedDate: DateTime
  primaryShards: Float!
  primaryStoreSize: String!
  replications: Float!
  status: String!
  storeSize: String!
  uuid: String!
}

type elasticsearchMigration {
  createdDate: DateTime!
  id: String!
  index: String!
  name: String!
  status: ElasticSearchMigrationStatus!
  updatedDate: DateTime!
}

type elasticsearchSource {
  activeIndex: String
  activeMigration: elasticsearchMigration
  alias: String!
  processIndex: String
  processMigration: elasticsearchMigration
  realtime: ElasticSearchSourceRealtimeStatus!
  schemaDifference: JSON
  status: ElasticSearchSourceStatus!
  tables: [String!]!
  topic: String
}

type workCueSheetDurations {
  background: Float!
  featured: Float!
  theme: Float!
}

type workDetailCueSheet {
  durations: workCueSheetDurations!
  episode: String
  id: String!
  lastBroadcast: String
  playType: WorkPlayType
  sequence: Float!
  series: String
  subTitle: String
  title: String!
}

type workDetailForMember {
  akas: [String!]
  category: WorkCategory
  cueSheets: [workDetailCueSheet!]!
  duration: Float!
  id: String!
  isCisnetExclude: Boolean!
  isCommissioned: Boolean!
  isLocal: Boolean!
  isLocalPublisher: Boolean!
  isLocalWriter: Boolean!
  isMechanicalDispute: Boolean!
  isMechanicalDivisionOfFee: Boolean!
  isMemberEligibleToAudioUpload: Boolean!
  isMultipleVersion: Boolean!
  isPerformingDispute: Boolean!
  isPerformingDivisionOfFee: Boolean!
  isRegistered: Boolean!
  iswc: String
  language: String
  languageCode: String
  lastPaid: String
  lastPerformed: String
  mechanicalShares: [workDetailShare!]!
  memberId: String!
  opusStatus: OpusStatus!
  performers: [String!]!
  performingShares: [workDetailShare!]!
  playType: WorkPlayType
  productions: [workDetailProduction!]!
  registrations: [workDetailRegistration!]!
  style: WorkStyle!
  title: String!
  version: WorkVersion
  workAudioFiles: [S3File!]
}

type workDetailProduction {
  artist: String!
  catalogue: String!
  format: String!
  formatTranslation: String
  id: String!
  label: String
  status: String
  statusTranslation: String
  title: String!
}

type workDetailRegistration {
  arrangement: WorkMusicArrangement
  claimNumber: String!
  composite: WorkVersion
  dateRegistered: DateTime
  duration: Float!
  excerpt: WorkVersion
  firstReleaseDate: DateTime
  id: String!
  intendedPurpose: String
  isCommissioned: Boolean!
  isLocal: Boolean!
  isMechanicalObsolete: Boolean!
  isPerformingObsolete: Boolean!
  iswc: String
  languageCode: String
  libraryCdNumber: String
  libraryTrackNumber: String
  lyricAdaptation: String
  name: String!
  performer: String
  productionTitle: String
  publisher: String
  publisherPercentage: Float!
  style: WorkStyle!
  submitterWorkId: String
  title: String!
  type: WorkRegistrationType
  usages: String
  version: WorkVersion
  writerPercentage: Float!
}

type workDetailShare {
  category: CdCategory!
  contract: String
  ipi: String!
  percentage: Float
  sharer: String
  society: String

  """
  mdof only
  """
  synch: String
  territory: workTerritory!
}

type workSearch {
  akas: [String!]!
  category: WorkCategory
  createdDate: DateTime
  duration: Float!
  isAudioAttached: Boolean!
  isAudioRequired: Boolean!
  isCisnetExclude: Boolean!
  isLocal: Boolean!
  isMechanicalDispute: Boolean!
  isMechanicalDivisionOfFee: Boolean!
  isPerformingDispute: Boolean!
  isPerformingDivisionOfFee: Boolean!
  isRegistered: Boolean!
  iswc: String
  lastPaid: String
  lastPaidId: String
  lastPerformed: String
  lastPerformedId: String
  opusStatus: OpusStatus
  publishers: [String!]!
  title: String!
  version: WorkVersion
  winfkey: String!
  workStatus: WorkStatuses
  writers: [String!]!
}

type workSearchWithSimple {
  publishers: [String!]!
  title: String!
  winfkey: String!
  writers: [String!]!
}

type workTerritory {
  abbreviation: String!
  code: Float!
  name: String!
}
